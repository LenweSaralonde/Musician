<Ui xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.blizzard.com/wow/ui/">

	<!-- Icon fonts -->

	<Font name="MusicianFontIconsNormal" inherits="GameFontNormal" font="Interface\AddOns\Musician\ui\fonts\musician-icons.ttf" height="12" virtual="true" />
	<Font name="MusicianFontIconsHighlight" inherits="GameFontHighlight" font="Interface\AddOns\Musician\ui\fonts\musician-icons.ttf" height="12" virtual="true" />
	<Font name="MusicianFontIconsDisable" inherits="GameFontDisable" font="Interface\AddOns\Musician\ui\fonts\musician-icons.ttf" height="12" virtual="true" />
	<Font name="MusicianFontIconsNormalLarge" inherits="GameFontNormalLarge" font="Interface\AddOns\Musician\ui\fonts\musician-icons.ttf" height="16" virtual="true" />
	<Font name="MusicianFontIconsHighlightLarge" inherits="GameFontHighlightLarge" font="Interface\AddOns\Musician\ui\fonts\musician-icons.ttf" height="16" virtual="true" />

	<!-- Percussion icon fonts -->

	<Font name="MusicianFontPercussionIconsNormal" inherits="GameFontNormal" font="Interface\AddOns\Musician\ui\fonts\musician-percussions.ttf" height="14" virtual="true" />
	<Font name="MusicianFontPercussionIconsHighlight" inherits="GameFontHighlight" font="Interface\AddOns\Musician\ui\fonts\musician-percussions.ttf" height="14" virtual="true" />
	<Font name="MusicianFontPercussionIconsDisable" inherits="GameFontDisable" font="Interface\AddOns\Musician\ui\fonts\musician-percussions.ttf" height="14" virtual="true" />
	<Font name="MusicianFontPercussionIconsNormalLarge" inherits="GameFontNormalLarge" font="Interface\AddOns\Musician\ui\fonts\musician-percussions.ttf" height="20" virtual="true" />
	<Font name="MusicianFontPercussionIconsHighlightLarge" inherits="GameFontHighlightLarge" font="Interface\AddOns\Musician\ui\fonts\musician-percussions.ttf" height="20" virtual="true" />

	<!-- Dialog Window -->

	<Frame name="MusicianDialogTemplate" parent="UIParent" toplevel="true" enableMouse="true" setAllPoints="true" movable="true" hidden="true" clampedtoscreen="true" frameStrata="DIALOG" virtual="true">

		<Scripts>
			<OnLoad>self:RegisterForDrag("LeftButton")</OnLoad>
			<OnDragStart>self:StartMoving()</OnDragStart>
			<OnDragStop>self:StopMovingOrSizing()</OnDragStop>
			<OnKeyDown inherit="append">
				if self:IsShown() and key == "ESCAPE" and not(self.noEscape) then
					self:SetPropagateKeyboardInput(false)
					self:Hide()
				else
					self:SetPropagateKeyboardInput(true)
				end
			</OnKeyDown>
			<OnShow>
				PlaySound(SOUNDKIT.IG_QUEST_LIST_OPEN)
			</OnShow>
			<OnHide>
				PlaySound(SOUNDKIT.IG_QUEST_LIST_CLOSE)
			</OnHide>
		</Scripts>

		<Anchors>
			<Anchor point="CENTER" x="0" y="0" />
		</Anchors>

		<Backdrop bgFile="Interface\DialogFrame\UI-DialogBox-Background" edgeFile="Interface\DialogFrame\UI-DialogBox-Border" tile="true">
			<BackgroundInsets>
				<AbsInset left="11" right="12" top="12" bottom="11" />
			</BackgroundInsets>
			<TileSize>
				<AbsValue val="32" />
			</TileSize>
			<EdgeSize>
				<AbsValue val="32" />
			</EdgeSize>
		</Backdrop>

		<Frames>
			<Button name="$parentCloseButton" parentKey="close" inherits="UIPanelCloseButton">
				<Anchors>
					<Anchor point="CENTER" relativePoint="TOPRIGHT">
						<Offset x="-7" y="-7" />
					</Anchor>
				</Anchors>
			</Button>
		</Frames>
	</Frame>

	<!-- Basic message dialog -->

	<Frame name="MusicianBasicMessageDialog" inherits="DialogBoxFrame">
		<Size>
			<AbsDimension x="384" y="128"/>
		</Size>
		<Layers>
			<Layer level="ARTWORK">
				<FontString parentKey="Text" inherits="GameFontNormalLarge" justifyH="CENTER" justifyV="CENTER" nonspacewrap="true">
					<Size>
						<AbsDimension x="360" y="75"/>
					</Size>
					<Anchors>
						<Anchor point="TOP" x="0" y="-8"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
	</Frame>

	<!-- Standard button with icon font template -->

	<Button name="MusicianIconButtonTemplate" inherits="UIPanelButtonTemplate" virtual="true">
		<NormalFont style="MusicianFontIconsNormal" />
		<HighlightFont style="MusicianFontIconsHighlight" />
		<DisabledFont style="MusicianFontIconsDisable" />
	</Button>

	<!-- Standard button with text and icon template -->

	<Button name="MusicianIconTextButtonTemplate" inherits="UIPanelButtonTemplate" virtual="true">
		<Layers>
			<Layer level="OVERLAY">
				<FontString name="$parentIcon" parentKey="icon" inherits="MusicianFontIconsNormal" justifyh="LEFT">
					<Size x="32" y="32" />
					<Anchors>
						<Anchor point="LEFT" relativePoint="LEFT" relativeTo="$parent" x="10" />
					</Anchors>
				</FontString>
			</Layer>
		</Layers>

		<ButtonText name="$parentText" parentKey="Text">
			<Anchors>
				<Anchor point="CENTER" x="8" />
			</Anchors>
		</ButtonText>

		<Scripts>
			<OnEnter inherit="append">
				if self:IsEnabled() then
					self.icon:SetFontObject(MusicianFontIconsHighlight)
				end
			</OnEnter>
			<OnLeave inherit="append">
				if self:IsEnabled() then
					self.icon:SetFontObject(MusicianFontIconsNormal)
				end
			</OnLeave>
			<OnEnable inherit="append">
				self.icon:SetFontObject(MusicianFontIconsNormal)
			</OnEnable>
			<OnDisable inherit="append">
				self.icon:SetFontObject(MusicianFontIconsDisable)
			</OnDisable>
			<OnMouseDown inherit="prepend">
				if self:IsEnabled() then
					if (not self.icon.oldPoint) then
						local point, relativeTo, relativePoint, x, y = self.icon:GetPoint(1)
						self.icon.oldPoint = point
						self.icon.oldX = x
						self.icon.oldY = y
					end
					local ox, oy = self:GetPushedTextOffset()
					self.icon:SetPoint(self.icon.oldPoint, self.icon.oldX + ox, self.icon.oldY + oy)
				end
			</OnMouseDown>
			<OnMouseUp inherit="prepend">
				if self:IsEnabled() then
					self.icon:SetPoint(self.icon.oldPoint, self.icon.oldX, self.icon.oldY)
				end
			</OnMouseUp>
		</Scripts>
	</Button>

	<!-- Standard button with LED -->

	<Button name="MusicianLEDTextButtonTemplate" inherits="UIPanelButtonTemplate" virtual="true">
		<Layers>
			<Layer level="OVERLAY">
				<Texture parentKey="ledOff" name="$parentLedOff" file="Interface\AddOns\Musician\ui\textures\led-off">
					<Size x="16" y="16" />
					<Anchors>
						<Anchor point="LEFT" relativePoint="LEFT" relativeTo="$parent" x="6" />
					</Anchors>
				</Texture>
				<Texture parentKey="led" name="$parentLedOn" file="Interface\AddOns\Musician\ui\textures\led-on">
					<Size x="16" y="16" />
					<Anchors>
						<Anchor point="CENTER" relativePoint="CENTER" relativeTo="$parentLedOff" />
					</Anchors>
				</Texture>
			</Layer>
		</Layers>

		<ButtonText name="$parentText" parentKey="Text">
			<Anchors>
				<Anchor point="CENTER" x="6" />
			</Anchors>
		</ButtonText>

		<Scripts>
			<OnLoad inherit="append">
				self.ledOff:SetDrawLayer("OVERLAY", 1)
				self.led:SetDrawLayer("OVERLAY", 2)
				self.led:SetAlpha(0)
				self.oldPoint = { self.ledOff:GetPoint() }
			</OnLoad>
			<OnMouseDown inherit="append">
				if self:IsEnabled() then
					local point, relativeTo, relativePoint, x, y = unpack(self.oldPoint)
					local ox, oy = self:GetPushedTextOffset()
					self.ledOff:SetPoint(point, relativeTo, relativePoint, x + ox, y + oy)
				end
			</OnMouseDown>
			<OnMouseUp inherit="append">
				if self:IsEnabled() then
					self.ledOff:SetPoint(unpack(self.oldPoint))
				end
			</OnMouseUp>
		</Scripts>
	</Button>

	<!-- Button with icon and progress bar -->

	<Button name="MusicianIconTextProgressBarButtonTemplate" inherits="MusicianIconTextButtonTemplate" virtual="true">
		<Layers>
			<Layer level="OVERLAY">
				<Texture name="$parentProgressBar" parentKey="progressBar" alphaMode="ADD">
					<Size x="0" y="1"/>
					<Anchors>
						<Anchor point="BOTTOMLEFT" x="5" y="3" relativePoint="BOTTOMLEFT" />
					</Anchors>
					<Color a="1" r="1" g="0.82" b="0" />
				</Texture>
			</Layer>
		</Layers>
		<OnLoad>
			self.progressBar:SetWidth(self:GetWidth())
		</OnLoad>
	</Button>

	<!-- Dropdown menu with tooltip -->

	<Frame name="MusicianDropDownMenuTooltipTemplate" virtual="true">
		<Scripts>
			<OnLoad>
				MSA_DropDownMenu_Create(self, self:GetParent())
			</OnLoad>
			<OnKeyDown inherit="append">
				if _G["MSA_DropDownList1"]:IsShown() and key == "ESCAPE" then
					self:SetPropagateKeyboardInput(false)
					MSA_DropDownMenu_OnHide(self)
				else
					self:SetPropagateKeyboardInput(true)
				end
			</OnKeyDown>
			<OnEnter>
				if(self.tooltipText ~= nil) then
					GameTooltip_AddNewbieTip(self, self.tooltipText, 1.0, 1.0, 1.0, self.newbieText)
				end
			</OnEnter>
			<OnLeave>
				if(self.tooltipText ~= nil) then
					GameTooltip:Hide()
				end
			</OnLeave>
		</Scripts>
	</Frame>

	<!-- Instrument dropdown -->

	<Frame name="MusicianInstrumentDropdownTemplate" inherits="MusicianDropDownMenuTooltipTemplate" virtual="true">
		<Scripts>
			<OnLoad inherit="prepend">
				MSA_DropDownMenu_SetWidth(self, 115)
				local dropdown = self

				dropdown.value = nil

				dropdown.UpdateValue = function(value)
					local originalMidiId = value
					local instrumentId = Musician.MIDI_INSTRUMENT_MAPPING[originalMidiId]
					local midiId = Musician.INSTRUMENTS[instrumentId].midi
					local instrumentName = Musician.Msg.INSTRUMENT_NAMES[instrumentId]
					dropdown.value = midiId
					dropdown.midiId = midiId
					dropdown.instrumentId = instrumentId

					if Musician.INSTRUMENTS[instrumentId].color ~= nil then
						local r, g, b = unpack(Musician.INSTRUMENTS[instrumentId].color)
						instrumentName = Musician.Utils.GetColorCode(unpack(Musician.INSTRUMENTS[instrumentId].color)) .. instrumentName .. "|r"
					end

					MSA_DropDownMenu_SetText(dropdown, instrumentName)
				end

				dropdown.SetValue = function(value)
					dropdown.UpdateValue(value)

					if dropdown.OnChange then
						dropdown.OnChange(dropdown.midiId, dropdown.instrumentId)
					end
				end

				dropdown.OnClick = function(self, arg1, arg2, checked)
					dropdown.SetValue(arg1)
				end

				dropdown.GetItems = function(frame, level, menuList)
					local info = MSA_DropDownMenu_CreateInfo()
					info.func = dropdown.OnClick

					local instrumentId
					for _, instrumentId in pairs(Musician.INSTRUMENTS_AVAILABLE) do
						local midiId = Musician.INSTRUMENTS[instrumentId].midi
						info.text = Musician.Msg.INSTRUMENT_NAMES[instrumentId]
						info.arg1 = midiId
						info.checked = dropdown.value == midiId
						if Musician.INSTRUMENTS[instrumentId].color ~= nil then
							info.colorCode = Musician.Utils.GetColorCode(unpack(Musician.INSTRUMENTS[instrumentId].color))
						end
						MSA_DropDownMenu_AddButton(info)
					end
				end

				MSA_DropDownMenu_Initialize(dropdown, dropdown.GetItems)
			</OnLoad>
		</Scripts>
	</Frame>

	<!-- Still image -->

	<Frame name="MusicianImageTemplate" virtual="true">
		<Scripts>
			<OnLoad>
				self.texture = self:CreateTexture(nil, "ARTWORK", nil, 7)
				self.texture:SetAllPoints(self)
				self:Hide()
				self.textureFile = 1
			</OnLoad>
			<OnShow>
				self.texture:SetTexture(self.textureFile)
			</OnShow>
			<OnHide>
				self.texture:SetTexture(1)
			</OnHide>
		</Scripts>
	</Frame>

	<!-- Animated image -->

	<Frame name="MusicianAnimatedImageTemplate" inherits="MusicianImageTemplate" virtual="true">
		<Scripts>
			<OnLoad inherit="prepend">
				self.width = 1024
				self.height = 1024
				self.tileWidth = 128
				self.tileHeight = 128
				self.fps = 30
			</OnLoad>
			<OnShow inherit="prepend">
				self.frame = 0
				self.elapsed = 0
			</OnShow>
			<OnUpdate>
				local frameW = self.tileWidth / self.width
				local frameH = self.tileHeight / self.height

				local framesX = floor(self.width / self.tileWidth)
				local framesY = floor(self.height / self.tileHeight)
				local frames = framesX * framesY

				self.elapsed = self.elapsed + elapsed
				self.frame = floor(self.fps * (self.elapsed % (frames / self.fps)))

				local row = math.floor(self.frame / framesX)
				local col = self.frame % framesX

				self.texture:SetTexCoord(col * frameW, (col + 1) * frameW, row * frameH, (row + 1) * frameH)
			</OnUpdate>
		</Scripts>
	</Frame>

	<!-- Tips and tricks window -->

	<Frame name="MusicianTipsAndTricksTemplate" inherits="GlowBoxTemplate" hidden="true" virtual="true">
		<Size x="640" y="360" />
		<Anchors>
			<Anchor point="CENTER" y="50" />
		</Anchors>
		<Frames>
			<Frame inherits="ShadowOverlaySmallTemplate" setAllPoints="true" />
			<CheckButton name="$parentEnableTipsAndTricks" parentKey="enableCheckbox" inherits="InterfaceOptionsSmallCheckButtonTemplate">
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativeTo="$parent" x="10" y="10"/>
				</Anchors>
				<Scripts>
					<OnShow>
						self:SetChecked(Musician_Settings.enableTipsAndTricks)
					</OnShow>
					<OnLoad>
						_G[self:GetName().."Text"]:SetText(Musician.Msg.TIPS_AND_TRICKS_ENABLE)
						self:SetHitRectInsets(0, -_G[self:GetName().."Text"]:GetWidth(), 0, 0)
						self:HookScript("OnClick", function()
							Musician_Settings.enableTipsAndTricks = self:GetChecked()
						end)
					</OnLoad>
				</Scripts>
			</CheckButton>
		</Frames>
		<Layers>
			<Layer level="ARTWORK">
				<FontString name="$parentTitle" parentKey="title" inherits="GameFontNormalShadowHuge2" justifyH="CENTER" justifyV="TOP">
					<Anchors>
						<Anchor point="TOP" y="-16"/>
						<Anchor point="LEFT" x="10"/>
						<Anchor point="RIGHT" x="-10"/>
					</Anchors>
				</FontString>
				<FontString name="$parentText" parentKey="text" inherits="GameFontHighlightLarge" justifyH="LEFT" justifyV="MIDDLE">
					<Size y="150" />
					<Anchors>
						<Anchor point="TOP" relativeTo="$parentTitle" relativePoint="BOTTOM" />
						<Anchor point="BOTTOM" y="30" />
						<Anchor point="LEFT" x="30"/>
						<Anchor point="RIGHT" x="-30"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>

		<Scripts>
			<OnShow>
				PlaySound(SOUNDKIT.IG_QUEST_LIST_OPEN)
			</OnShow>
			<OnHide>
				PlaySound(SOUNDKIT.IG_QUEST_LIST_CLOSE)
			</OnHide>
		</Scripts>
	</Frame>

	<!-- Tips and tricks window buttons -->

	<Button name="MusicianTipsAndTricksCancelButtonTemplate" inherits="UIMenuButtonStretchTemplate" level="OVERLAY" virtual="true">
		<Size y="30" x="30" />
		<ButtonText name="$parentText" parentKey="Text" />
		<Scripts>
			<OnLoad>
				self:SetWidth(self.Text:GetStringWidth() + 24)
				self:GetHighlightTexture():SetTexCoord(0, 1, 0.2086, 0.5659)
			</OnLoad>
			<OnClick>
				UIPanelCloseButton_OnClick(self)
			</OnClick>
		</Scripts>
	</Button>

	<Button name="MusicianTipsAndTricksOkButtonTemplate" inherits="UIMenuButtonStretchTemplate" level="OVERLAY" virtual="true">
		<Size y="44" x="44" />
		<Layers>
			<Layer level="BACKGROUND">
				<Texture parentKey="background" name="$parentBackground">
					<Anchors>
						<Anchor point="TOPLEFT" x="3" y="-3" />
						<Anchor point="BOTTOMRIGHT" x="-3" y="3" />
					</Anchors>
					<Color a="1" r=".75" g="0" b="0" />
				</Texture>
			</Layer>
		</Layers>
		<ButtonText name="$parentText" parentKey="Text" />
		<NormalFont style="GameFontNormalHuge"/>
		<HighlightFont style="GameFontHighlightHuge"/>
		<DisabledFont style="GameFontDisableHuge"/>
		<Scripts>
			<OnLoad>
				self.background:SetDrawLayer("BACKGROUND", -8)
				self:SetWidth(max(128, self.Text:GetStringWidth() + 40))
				self:GetHighlightTexture():SetTexCoord(0, 1, 0.2086, 0.5659)
			</OnLoad>
			<OnClick>
				UIPanelCloseButton_OnClick(self)
			</OnClick>
		</Scripts>
	</Button>

	<!-- Band play button -->

	<Button name="MusicianBandPlayButtonTemplate" inherits="MusicianLEDTextButtonTemplate" virtual="true">
		<Size x="64" y="22" />
		<NormalFont style="MusicianFontIconsNormal" />
		<HighlightFont style="MusicianFontIconsHighlight" />
		<DisabledFont style="MusicianFontIconsDisable" />
		<Frames>
			<Frame name="$parentReadyCount" parentKey="count" hidden="true">
				<Size x="12" y="12" />
				<Anchors>
					<Anchor point="CENTER" relativePoint="TOPRIGHT" x="-10" y="-4" />
				</Anchors>
				<Layers>
					<Layer level="ARTWORK">
						<Texture name="$parentTexture" parentKey="texture" file="Interface\AddOns\Musician\ui\textures\full-circle.blp" setAllPoints="true" />
					</Layer>
					<Layer level="OVERLAY">
						<FontString name="$parentText" parentKey="text" inherits="GameFontBlackTiny2" text="0" setAllPoints="true" />
					</Layer>
				</Layers>
				<Scripts>
					<OnLoad>
						self.texture:SetVertexColor(1, .82, 0)
					</OnLoad>
				</Scripts>
			</Frame>
		</Frames>
		<Scripts>
			<OnLoad inherit="append">
				self.SetChecked = function(self, checked)
					self.checked = checked
					if checked then
						self.led:SetAlpha(1)
					else
						self.led:SetAlpha(0)
					end
				end

				self.SetBlinking = function(self, blinking)
					self.blinking = blinking
					self.blinkTime = 0
					self:SetChecked(self.checked)
				end

				self.SetTooltipText = function(self, text)
					self.tooltipText = text
					if self.mouseOver then
						GameTooltip_AddNewbieTip(self, self.tooltipText, 1.0, 1.0, 1.0, self.newbieText)
					end
				end

				self.tooltipText = Musician.Msg.PLAY_IN_BAND
				self:SetText(Musician.Icons.BandPlay)
				self.led:SetVertexColor(.33, 1, 0, 1)
				self:SetChecked(false)
			</OnLoad>
			<OnUpdate>
				if self.checked and self.blinking then
					self.blinkTime = self.blinkTime + elapsed
					self.led:SetAlpha(abs(1 - 2 * (4 * self.blinkTime % 1)))
				end
			</OnUpdate>
			<OnClick inherit="append">
				PlaySound(SOUNDKIT.U_CHAT_SCROLL_BUTTON)
			</OnClick>
			<OnEnter inherit="append">
				self.mouseOver = true
			</OnEnter>
			<OnLeave inherit="append">
				self.mouseOver = false
			</OnLeave>
		</Scripts>
	</Button>

</Ui>