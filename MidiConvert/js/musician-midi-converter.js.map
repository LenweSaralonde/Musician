{"version":3,"file":"musician-midi-converter.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,wBAAyB,GAAIH,GACV,iBAAZC,QACdA,QAA+B,sBAAID,IAEnCD,EAA4B,sBAAIC,GACjC,CATD,CASGK,MAAM,I,2BCTTJ,EAAQK,UAAY,EAApBL,KACAA,EAAAA,I,UC+CA,SAASM,EAAWC,GAIlB,IAHA,IAUIC,EAVAC,EAAI,IAAIC,EAAOH,GAEfI,EAAS,IACLF,EAAEG,OAAO,CACf,IAAIC,EAAQC,IACZH,EAAOI,KAAKF,EACd,CAEA,OAAOF,EAIP,SAASG,IACP,IAAID,EAAQ,CAAC,EACbA,EAAMG,UAAYP,EAAEQ,aAEpB,IAAIC,EAAgBT,EAAEU,YAEtB,GAA+B,MAAV,IAAhBD,GAAgC,CAEnC,GAAsB,MAAlBA,EAmGG,IAAqB,KAAjBA,EAIT,OAHAL,EAAMO,KAAO,QACTC,EAASZ,EAAEQ,aACfJ,EAAMN,KAAOE,EAAEa,UAAUD,GAClBR,EACF,GAAqB,KAAjBK,EAIT,OAHAL,EAAMO,KAAO,WACTC,EAASZ,EAAEQ,aACfJ,EAAMN,KAAOE,EAAEa,UAAUD,GAClBR,EAEP,KAAM,sCAAwCK,CAChD,CA7GEL,EAAMU,MAAO,EACb,IAAIC,EAAef,EAAEU,YACjBE,EAASZ,EAAEQ,aACf,OAAQO,GACN,KAAK,EAEH,GADAX,EAAMO,KAAO,iBACE,IAAXC,EAAc,KAAM,sDAAwDA,EAEhF,OADAR,EAAMY,OAAShB,EAAEiB,aACVb,EACT,KAAK,EAGH,OAFAA,EAAMO,KAAO,OACbP,EAAMc,KAAOlB,EAAEmB,WAAWP,GACnBR,EACT,KAAK,EAGH,OAFAA,EAAMO,KAAO,kBACbP,EAAMc,KAAOlB,EAAEmB,WAAWP,GACnBR,EACT,KAAK,EAGH,OAFAA,EAAMO,KAAO,YACbP,EAAMc,KAAOlB,EAAEmB,WAAWP,GACnBR,EACT,KAAK,EAGH,OAFAA,EAAMO,KAAO,iBACbP,EAAMc,KAAOlB,EAAEmB,WAAWP,GACnBR,EACT,KAAK,EAGH,OAFAA,EAAMO,KAAO,SACbP,EAAMc,KAAOlB,EAAEmB,WAAWP,GACnBR,EACT,KAAK,EAGH,OAFAA,EAAMO,KAAO,SACbP,EAAMc,KAAOlB,EAAEmB,WAAWP,GACnBR,EACT,KAAK,EAGH,OAFAA,EAAMO,KAAO,WACbP,EAAMc,KAAOlB,EAAEmB,WAAWP,GACnBR,EACT,KAAK,GAEH,GADAA,EAAMO,KAAO,gBACC,GAAVC,EAAa,KAAM,qDAAuDA,EAE9E,OADAR,EAAMgB,QAAUpB,EAAEU,YACXN,EACT,KAAK,GAEH,GADAA,EAAMO,KAAO,aACC,GAAVC,EAAa,KAAM,kDAAoDA,EAE3E,OADAR,EAAMiB,KAAOrB,EAAEU,YACRN,EACT,KAAK,GAEH,GADAA,EAAMO,KAAO,aACC,GAAVC,EAAa,KAAM,kDAAoDA,EAC3E,OAAOR,EACT,KAAK,GAEH,GADAA,EAAMO,KAAO,WACC,GAAVC,EAAa,KAAM,gDAAkDA,EAEzE,OADAR,EAAMkB,oBAAsBtB,EAAEuB,aACvBnB,EACT,KAAK,GAEH,GADAA,EAAMO,KAAO,cACC,GAAVC,EAAa,KAAM,mDAAqDA,EAC5E,IAAIY,EAAWxB,EAAEU,YAQjB,OANAN,EAAMqB,UADY,CAAE,EAAM,GAAI,GAAM,GAAI,GAAM,GAAI,GAAM,IACf,GAAXD,GAC9BpB,EAAMsB,KAAkB,GAAXF,EACbpB,EAAMuB,IAAM3B,EAAEU,YACdN,EAAMwB,IAAM5B,EAAEU,YACdN,EAAMyB,MAAQ7B,EAAEU,YAChBN,EAAM0B,SAAW9B,EAAEU,YACZN,EACT,KAAK,GAEH,GADAA,EAAMO,KAAO,gBACC,GAAVC,GAAyB,GAAVA,EAAa,KAAM,0DAA4DA,EAUlG,OATAR,EAAM2B,UAAY/B,EAAEU,YACpBN,EAAM4B,YAAe,GAAKhC,EAAEU,YACb,IAAXE,GACFR,EAAM6B,UAAYjC,EAAEU,YACpBN,EAAM8B,cAAgBlC,EAAEU,cAExBN,EAAM6B,UAAY,GAClB7B,EAAM8B,cAAgB,GAEjB9B,EACT,KAAK,GAEH,GADAA,EAAMO,KAAO,eACC,GAAVC,EAAa,KAAM,oDAAsDA,EAG7E,OAFAR,EAAM+B,IAAMnC,EAAEoC,WACdhC,EAAMiC,MAAQrC,EAAEU,YACTN,EACT,KAAK,IAGH,OAFAA,EAAMO,KAAO,oBACbP,EAAMN,KAAOE,EAAEa,UAAUD,GAClBR,EACT,QAIE,OAHAA,EAAMO,KAAO,cACbP,EAAMN,KAAOE,EAAEa,UAAUD,GACzBR,EAAMW,aAAeA,EACdX,EAef,KAAO,CAEL,IAAIkC,EACJ,GAA+B,IAAV,IAAhB7B,GAA6B,CAGhC,GAA0B,OAAtBV,EACF,KAAM,qDACRuC,EAAS7B,EACTA,EAAgBV,EAChBK,EAAMmC,SAAU,CAClB,MACED,EAAStC,EAAEU,YACXX,EAAoBU,EAEtB,IAAI+B,EAAY/B,GAAiB,EAEjC,OADAL,EAAMgB,QAA0B,GAAhBX,EACR+B,GACN,KAAK,EAIH,OAHApC,EAAMO,KAAO,UACbP,EAAMqC,WAAaH,EACnBlC,EAAMsC,SAAW1C,EAAEU,YACZN,EACT,KAAK,EACH,IAAIsC,EAAW1C,EAAEU,YAKjB,OAJAN,EAAMO,KAAoB,IAAb+B,EAAiB,UAAY,SAC1CtC,EAAMqC,WAAaH,EACnBlC,EAAMsC,SAAWA,EACA,IAAbA,IAAgBtC,EAAMuC,OAAQ,GAC3BvC,EACT,KAAK,GAIH,OAHAA,EAAMO,KAAO,iBACbP,EAAMqC,WAAaH,EACnBlC,EAAMwC,OAAS5C,EAAEU,YACVN,EACT,KAAK,GAIH,OAHAA,EAAMO,KAAO,aACbP,EAAMyC,eAAiBP,EACvBlC,EAAM0C,MAAQ9C,EAAEU,YACTN,EACT,KAAK,GAGH,OAFAA,EAAMO,KAAO,gBACbP,EAAM2C,cAAgBT,EACflC,EACT,KAAK,GAGH,OAFAA,EAAMO,KAAO,oBACbP,EAAMwC,OAASN,EACRlC,EACT,KAAK,GAGH,OAFAA,EAAMO,KAAO,YACbP,EAAM0C,MAASR,GAAUtC,EAAEU,aAAe,GAAM,KACzCN,EACT,QACE,KAAM,iCAAmCoC,EAE/C,CACF,CACF,CAEA,SAASvC,EAAOH,GACdH,KAAKqD,OAASlD,EACdH,KAAKsD,UAAYtD,KAAKqD,OAAOpC,OAC7BjB,KAAKuD,IAAM,CACb,CAEAjD,EAAOkD,UAAUhD,IAAM,WACrB,OAAOR,KAAKuD,KAAOvD,KAAKsD,SAC1B,EAEAhD,EAAOkD,UAAUzC,UAAY,WAC3B,IAAI0C,EAASzD,KAAKqD,OAAOrD,KAAKuD,KAE9B,OADAvD,KAAKuD,KAAO,EACLE,CACT,EAEAnD,EAAOkD,UAAUf,SAAW,WAC1B,IAAIiB,EAAI1D,KAAKe,YACb,OAAQ,IAAJ2C,EACKA,EAAI,IAEJA,CACX,EAEApD,EAAOkD,UAAUlC,WAAa,WAI1B,OAHOtB,KAAKe,aAGE,GAFPf,KAAKe,WAGhB,EAEAT,EAAOkD,UAAUG,UAAY,WAC3B,IAAID,EAAI1D,KAAKsB,aACb,OAAQ,MAAJoC,EACKA,EAAI,MAEJA,CACX,EAEApD,EAAOkD,UAAU5B,WAAa,WAK1B,OAJO5B,KAAKe,aAIE,KAHPf,KAAKe,aAGe,GAFpBf,KAAKe,WAGhB,EAEAT,EAAOkD,UAAUI,UAAY,WAC3B,IAAIF,EAAI1D,KAAK4B,aACb,OAAQ,QAAJ8B,EACKA,EAAI,SAEJA,CACX,EAEApD,EAAOkD,UAAUK,WAAa,WAM1B,OALO7D,KAAKe,aAKE,KAJPf,KAAKe,aAIe,KAHpBf,KAAKe,aAG4B,GAFjCf,KAAKe,WAGhB,EAEAT,EAAOkD,UAAUtC,UAAY,SAAS4C,GACpC,IAAIC,EAAQ/D,KAAKqD,OAAOW,MAAMhE,KAAKuD,IAAKvD,KAAKuD,IAAMO,GAEnD,OADA9D,KAAKuD,KAAOO,EACLC,CACT,EAEAzD,EAAOkD,UAAUhC,WAAa,SAASsC,GAGrC,IAAIC,EAAQ/D,KAAKkB,UAAU4C,GACvBG,GAAkB,IAAIC,aAAcC,OAAOJ,GAC3CK,EAAmBC,OAAOC,aAAaC,MAAM,KAAMR,GACvD,OAAIK,EAAiBnD,OAASgD,EAAgBhD,OACrCgD,EAEFG,CACT,EAEA9D,EAAOkD,UAAU3C,WAAa,WAE5B,IADA,IAAI4C,EAAS,GACLzD,KAAKQ,OAAO,CAClB,IAAIgE,EAAIxE,KAAKe,YACb,KAAQ,IAAJyD,GAKF,OAAOf,EAASe,EAJhBf,GAAe,IAAJe,EACXf,IAAW,CAKf,CAEA,OAAOA,CACT,EAEAnD,EAAOkD,UAAUiB,UAAY,WAC3B,IAAIC,EAAK1E,KAAKwB,WAAW,GACrBP,EAASjB,KAAK6D,aAElB,MAAO,CACLa,GAAIA,EACJzD,OAAQA,EACRd,KAJSH,KAAKkB,UAAUD,GAM5B,EAEApB,EAAOD,QA3VP,SAAmBO,GACjB,IAAIE,EAAI,IAAIC,EAAOH,GAEfwE,EAActE,EAAEoE,YACpB,GAAsB,QAAlBE,EAAYD,GACd,KAAM,0CAA4CC,EAAYD,GAAK,IAIrE,IAHA,IAAIE,EAkBN,SAAqBzE,GACnB,IAAIE,EAAI,IAAIC,EAAOH,GAKfsD,EAAS,CACXoB,OAJWxE,EAAEiB,aAKbwD,UAJczE,EAAEiB,cAOdyD,EAAe1E,EAAEiB,aAQrB,OAPmB,MAAfyD,GACFtB,EAAOuB,gBAAkB,KAASD,GAAgB,GAClDtB,EAAOwB,cAA+B,IAAfF,GAEvBtB,EAAOyB,aAAeH,EAGjBtB,CACT,CAtCe0B,CAAYR,EAAYxE,MAEjCiF,EAAS,GACJC,EAAE,GAAIhF,EAAEG,OAAS6E,EAAIT,EAAOE,UAAWO,IAAK,CACnD,IAAIC,EAAajF,EAAEoE,YACnB,GAAqB,QAAjBa,EAAWZ,GACb,KAAM,0CAA4CY,EAAWZ,GAAK,IACpE,IAAIa,EAAQrF,EAAWoF,EAAWnF,MAClCiF,EAAOzE,KAAK4E,EACd,CAEA,MAAO,CACLX,OAAQA,EACRQ,OAAQA,EAEZ,C,gPCwBA,SAASI,EAAWC,EAAGF,EAAOG,GAC5B,IACIL,EADAM,EAAI,IAAIC,EACL9B,EAAMyB,EAAMtE,OACfH,EAAgB,KACpB,IAAKuE,EAAE,EAAGA,EAAIvB,EAAKuB,KAII,IAAjBK,EAAK9C,UAAsB8C,EAAK9C,SAAY2C,EAAMF,GAAGzC,WAAS9B,EAAgB,MAElFA,EAAgB+E,EAAWF,EAAGJ,EAAMF,GAAIvE,EAAe4E,EAAKI,oBAE9DL,EAAEM,WAAW,OAAQJ,EAAEtC,OACzB,CAEA,SAASwC,EAAWJ,EAAGhF,EAAOL,EAAmB0F,GAC/C,IAAI9E,EAAOP,EAAMO,KACbJ,EAAYH,EAAMG,UAClBW,EAAOd,EAAMc,MAAQ,GACrBpB,EAAOM,EAAMN,MAAQ,GACrBW,EAAgB,KAGpB,OAFA2E,EAAEO,YAAYpF,GAENI,GAEN,IAAK,iBACHyE,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,GACbR,EAAEO,YAAY,GACdP,EAAES,YAAYzF,EAAMY,QACpB,MAEF,IAAK,OACHoE,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,GACbR,EAAEO,YAAYzE,EAAKN,QACnBwE,EAAEU,YAAY5E,GACd,MAEF,IAAK,kBACHkE,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,GACbR,EAAEO,YAAYzE,EAAKN,QACnBwE,EAAEU,YAAY5E,GACd,MAEF,IAAK,YACHkE,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,GACbR,EAAEO,YAAYzE,EAAKN,QACnBwE,EAAEU,YAAY5E,GACd,MAEF,IAAK,iBACHkE,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,GACbR,EAAEO,YAAYzE,EAAKN,QACnBwE,EAAEU,YAAY5E,GACd,MAEF,IAAK,SACHkE,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,GACbR,EAAEO,YAAYzE,EAAKN,QACnBwE,EAAEU,YAAY5E,GACd,MAEF,IAAK,SACHkE,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,GACbR,EAAEO,YAAYzE,EAAKN,QACnBwE,EAAEU,YAAY5E,GACd,MAEF,IAAK,WACHkE,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,GACbR,EAAEO,YAAYzE,EAAKN,QACnBwE,EAAEU,YAAY5E,GACd,MAEF,IAAK,gBACHkE,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,IACbR,EAAEO,YAAY,GACdP,EAAEQ,WAAWxF,EAAMgB,SACnB,MAEF,IAAK,aACHgE,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,IACbR,EAAEO,YAAY,GACdP,EAAEQ,WAAWxF,EAAMiB,MACnB,MAEF,IAAK,aACH+D,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,IACbR,EAAEO,YAAY,GACd,MAEF,IAAK,WACHP,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,IACbR,EAAEO,YAAY,GACdP,EAAEW,YAAY3F,EAAMkB,qBACpB,MAEF,IAAK,cACH8D,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,IACbR,EAAEO,YAAY,GACd,IACInE,EAAyB,GAAbpB,EAAMsB,KADJ,CAAE,GAAI,EAAM,GAAI,GAAM,GAAI,GAAM,GAAI,IACLtB,EAAMqB,WACvD2D,EAAEQ,WAAWpE,GACb4D,EAAEQ,WAAWxF,EAAMuB,KACnByD,EAAEQ,WAAWxF,EAAMwB,KACnBwD,EAAEQ,WAAWxF,EAAMyB,OACnBuD,EAAEQ,WAAWxF,EAAM0B,UACnB,MAEF,IAAK,gBACHsD,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,IACbR,EAAEO,YAAY,GACdP,EAAEQ,WAAWxF,EAAM2B,WACnB,IAAIC,EAAqE,IAAvDgE,KAAKC,MAAOD,KAAKE,IAAI9F,EAAM4B,aAAegE,KAAKG,KACjEf,EAAEQ,WAAW5D,GACboD,EAAEQ,WAAWxF,EAAM6B,WACnBmD,EAAEQ,WAAWxF,EAAM8B,eAAiB,GACpC,MAEF,IAAK,eACHkD,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,IACbR,EAAEO,YAAY,GACdP,EAAEgB,UAAUhG,EAAM+B,KAClBiD,EAAEQ,WAAWxF,EAAMiC,OACnB,MAEF,IAAK,oBACH+C,EAAEQ,WAAW,KACbR,EAAEQ,WAAW,KACbR,EAAEO,YAAY7F,EAAKc,QACnBwE,EAAEiB,WAAWvG,GACb,MAEF,IAAK,cACuB,MAAtBM,EAAMW,eACRqE,EAAEQ,WAAW,KACbR,EAAEQ,WAAWxF,EAAMW,cACnBqE,EAAEO,YAAY7F,EAAKc,QACnBwE,EAAEiB,WAAWvG,IAEf,MAGF,IAAK,QACHsF,EAAEQ,WAAW,KACbR,EAAEO,YAAY7F,EAAKc,QACnBwE,EAAEiB,WAAWvG,GACb,MAEF,IAAK,WACHsF,EAAEQ,WAAW,KACbR,EAAEO,YAAY7F,EAAKc,QACnBwE,EAAEiB,WAAWvG,GACb,MAGF,IAAK,WAMHW,IAFwC,IAAvBgF,GAAgCrF,EAAMuC,OAAW8C,GAAwC,GAAlBrF,EAAMsC,SAAkB,IAAO,KAE5FtC,EAAMgB,WACXrB,GAAmBqF,EAAEQ,WAAWnF,GACtD2E,EAAEQ,WAAWxF,EAAMqC,YACnB2C,EAAEQ,WAAWxF,EAAMsC,UACnB,MAEF,IAAK,UACHjC,EAAgB,IAAOL,EAAMgB,WACPrB,GAAmBqF,EAAEQ,WAAWnF,GACtD2E,EAAEQ,WAAWxF,EAAMqC,YACnB2C,EAAEQ,WAAWxF,EAAMsC,UACnB,MAEF,IAAK,kBACHjC,EAAgB,IAAOL,EAAMgB,WACPrB,GAAmBqF,EAAEQ,WAAWnF,GACtD2E,EAAEQ,WAAWxF,EAAMqC,YACnB2C,EAAEQ,WAAWxF,EAAMwC,QACnB,MAEF,IAAK,cACHnC,EAAgB,IAAOL,EAAMgB,WACPrB,GAAmBqF,EAAEQ,WAAWnF,GACtD2E,EAAEQ,WAAWxF,EAAMyC,gBACnBuC,EAAEQ,WAAWxF,EAAM0C,OACnB,MAEF,IAAK,iBACHrC,EAAgB,IAAOL,EAAMgB,WACPrB,GAAmBqF,EAAEQ,WAAWnF,GACtD2E,EAAEQ,WAAWxF,EAAM2C,eACnB,MAEF,IAAK,qBACHtC,EAAgB,IAAOL,EAAMgB,WACPrB,GAAmBqF,EAAEQ,WAAWnF,GACtD2E,EAAEQ,WAAWxF,EAAMwC,QACnB,MAEF,IAAK,aACHnC,EAAgB,IAAOL,EAAMgB,WACPrB,GAAmBqF,EAAEQ,WAAWnF,GACtD,IAAI6F,EAAU,KAASlG,EAAM0C,MACzByD,EAAmB,IAAVD,EACTE,EAASF,GAAW,EAAK,IAC7BlB,EAAEQ,WAAWW,GACbnB,EAAEQ,WAAWY,GACf,MAEA,QACE,KAAM,4BAA8B7F,EAExC,OAAOF,CACT,CAGA,SAAS8E,IACP5F,KAAKqD,OAAS,EAChB,CAEAuC,EAAOpC,UAAUyC,WAAa,SAASa,GACrC9G,KAAKqD,OAAO1C,KAAS,IAAJmG,EACnB,EACAlB,EAAOpC,UAAUiD,UAAYb,EAAOpC,UAAUyC,WAE9CL,EAAOpC,UAAU0C,YAAc,SAASY,GACtC,IAAIC,EAAMD,GAAK,EAAK,IAChBE,EAAS,IAAJF,EAET9G,KAAKiG,WAAWc,GAChB/G,KAAKiG,WAAWe,EAClB,EACApB,EAAOpC,UAAUyD,WAAarB,EAAOpC,UAAU0C,YAE/CN,EAAOpC,UAAU4C,YAAc,SAASU,GACtC,IAAIC,EAAMD,GAAK,GAAM,IACjBE,EAAMF,GAAK,EAAK,IAChBI,EAAS,IAAJJ,EAET9G,KAAKiG,WAAWc,GAChB/G,KAAKiG,WAAWe,GAChBhH,KAAKiG,WAAWiB,EAClB,EACAtB,EAAOpC,UAAU2D,WAAavB,EAAOpC,UAAU4C,YAE/CR,EAAOpC,UAAU4D,YAAc,SAASN,GACtC,IAAIC,EAAMD,GAAK,GAAM,IACjBE,EAAMF,GAAK,GAAM,IACjBI,EAAMJ,GAAK,EAAK,IAChBO,EAAS,IAAJP,EAET9G,KAAKiG,WAAWc,GAChB/G,KAAKiG,WAAWe,GAChBhH,KAAKiG,WAAWiB,GAChBlH,KAAKiG,WAAWoB,EAClB,EACAzB,EAAOpC,UAAU8D,WAAa1B,EAAOpC,UAAU4D,YAG/CxB,EAAOpC,UAAUkD,WAAa,SAASa,GACrCvH,KAAKqD,OAASrD,KAAKqD,OAAOmE,OAAOC,MAAMjE,UAAUQ,MAAM0D,KAAKH,EAAK,GACnE,EAEA3B,EAAOpC,UAAU2C,YAAc,SAASwB,GACtC,IAAItC,EAAGvB,EAAM6D,EAAI1G,OAAQsG,EAAM,GAC/B,IAAKlC,EAAE,EAAGA,EAAIvB,EAAKuB,IACjBkC,EAAI5G,KAAKgH,EAAIC,YAAYvC,IAE3BrF,KAAK0G,WAAWa,EAClB,EAEA3B,EAAOpC,UAAUwC,YAAc,SAASc,GACtC,GAAIA,EAAI,EAAG,KAAM,gDAEjB,GAAIA,GAAK,IACP9G,KAAKiG,WAAWa,OACX,CACL,IAAIzB,EAAIyB,EACJ/C,EAAQ,GAGZ,IAFAA,EAAMpD,KAAS,IAAJ0E,GACXA,IAAM,EACCA,GAAG,CACR,IAAIb,EAAQ,IAAJa,EAAW,IACnBtB,EAAMpD,KAAK6D,GACXa,IAAM,CACR,CACArF,KAAK0G,WAAW3C,EAAM8D,UACxB,CACF,EAEAjC,EAAOpC,UAAUuC,WAAa,SAASrB,EAAIvE,GACzCH,KAAKmG,YAAYzB,GACjB1E,KAAKoH,YAAYjH,EAAKc,QACtBjB,KAAK0G,WAAWvG,EAClB,EAEAN,EAAOD,QAhWP,SAAmBO,EAAMuF,GACvB,GAAoB,WAAhBoC,EAAO3H,GACT,KAAM,oBAERuF,EAAOA,GAAQ,CAAC,EAEhB,IAEIL,EAFAT,EAASzE,EAAKyE,QAAU,CAAC,EACzBQ,EAASjF,EAAKiF,QAAU,GACrBtB,EAAMsB,EAAOnE,OAEhBwE,EAAI,IAAIG,EAGZ,IAOF,SAAqBH,EAAGb,EAAQE,GAC9B,IAAID,EAA0B,MAAjBD,EAAOC,OAAiB,EAAID,EAAOC,OAE5CE,EAAe,IACfH,EAAOG,aACTA,EAAeH,EAAOG,aACbH,EAAOK,eAAiBL,EAAOI,gBACxCD,IAA2C,IAAzBH,EAAOI,kBAA2B,EAA6B,IAAvBJ,EAAOK,cACxDL,EAAOM,eAChBH,EAAqC,MAAtBH,EAAOM,cAGxB,IAAI6C,EAAI,IAAInC,EACZmC,EAAE7B,YAAYrB,GACdkD,EAAE7B,YAAYpB,GACdiD,EAAE7B,YAAYnB,GAEdU,EAAEM,WAAW,OAAQgC,EAAE1E,OACzB,CA3BE2E,CAAYvC,EAAGb,EAAQd,GAElBuB,EAAE,EAAGA,EAAIvB,EAAKuB,IACjBG,EAAWC,EAAGL,EAAOC,GAAIK,GAG3B,OAAOD,EAAEpC,MACX,C,GCxBI4E,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaxI,QAGrB,IAAIC,EAASoI,EAAyBE,GAAY,CAGjDvI,QAAS,CAAC,GAOX,OAHA0I,EAAoBH,GAAUtI,EAAQA,EAAOD,QAASsI,GAG/CrI,EAAOD,OACf,CCrBAsI,EAAoBK,EAAI,CAAC3I,EAAS4I,KACjC,IAAI,IAAIhG,KAAOgG,EACXN,EAAoBO,EAAED,EAAYhG,KAAS0F,EAAoBO,EAAE7I,EAAS4C,IAC5EkG,OAAOC,eAAe/I,EAAS4C,EAAK,CAAEoG,YAAY,EAAMC,IAAKL,EAAWhG,IAE1E,ECND0F,EAAoBO,EAAI,CAACK,EAAKC,IAAUL,OAAOlF,UAAUwF,eAAetB,KAAKoB,EAAKC,GCClFb,EAAoBe,EAAKrJ,IACH,oBAAXsJ,QAA0BA,OAAOC,aAC1CT,OAAOC,eAAe/I,EAASsJ,OAAOC,YAAa,CAAEhG,MAAO,WAE7DuF,OAAOC,eAAe/I,EAAS,aAAc,CAAEuD,OAAO,GAAO,E,o4FCL9D,IAAMlD,EAAYmJ,EAAAA,KAAAA,UAELC,EAAoB,MAE3BC,EAAc,OAEdC,EAAoB,KACpBC,EAAyB,KACzBC,EAAgB,IAChBC,EAAgB,MAAQD,EACxBE,EAAgB,GAEhBC,EAA2B,EAC3BC,EAAwB,GAExBC,EAAc,IACdC,EAAgB,IAChBC,EAAuB,EACvBC,EAAqB,GAQ3B,SAASC,EAAWC,EAAKpG,GACxBoG,GAAa9D,KAAK+D,IAAI,IAAKrG,GAAS,EAEpC,IADA,IAAIsG,EAAS,GACJ7F,EAAI,EAAGA,EAAIT,EAAOS,IAC1B6F,EAAShG,OAAOC,aAAmB,IAAN6F,GAAcE,EAC3CF,IAAa,EAEd,OAAOE,CACR,CAkBA,SAASC,EAAW3C,GACnB,IAAM4C,EASP,SAAoB5C,GACnB,OAAO6C,SAASC,mBAAmB9C,IAAM+C,QAAQ,WAAY,GAC9D,CAXiBC,CAAWhD,GAC3B,OAAOuC,EAAWK,EAAQtJ,OAAQ,GAAKsJ,CACxC,CAodO,SAASK,EAASC,EAAWC,EAAUC,GAE7C,IAAMC,EA1IP,SAAqBH,EAAWC,EAAUC,GAGrCF,aAAqBI,cACxBJ,EAAY,IAAIK,WAAWL,IAE5B,IAaIM,EAbEC,EAAOnL,EAAU4K,GAIjBQ,EAhQP,SAAwB9K,GAEvB,IAK0B+K,EALpBD,EAAoB,GACpBE,EAAY,IAAIC,IAChBC,EAAkB,IAAID,IACtBE,EAAoB,CAAC,EAAGC,EAAAC,EAEVrL,GAAM,IAA1B,IAAAoL,EAAAE,MAAAP,EAAAK,EAAAG,KAAAC,MAA4B,KAAjBtL,EAAK6K,EAAAnI,MAEf,GAAmB,WAAf1C,EAAMO,MAAoC,YAAfP,EAAMO,KAAoB,CACxD,IAAMgL,EAAU,GAAHxE,OAAM/G,EAAMgB,QAAO,KAAA+F,OAAI/G,EAAMwL,WAAU,KAAAzE,OAAI/G,EAAMqC,YAC9D,GAAmB,WAAfrC,EAAMO,KAAmB,CAC5BuK,EAAUW,IAAIF,EAASvL,GAGvB,IAAM0L,EAAuBV,EAAgB5C,IAAImD,GAC7CG,IACHd,EAAkB1K,KAAK,CACtBC,UAAWH,EAAMG,UACjBwL,KAAM3L,EAAM2L,KACZC,KAAM5L,EAAM4L,KACZ5K,QAAS0K,EAAqB1K,QAC9BqB,WAAYqJ,EAAqBrJ,WACjCmJ,WAAYE,EAAqBF,WACjCjL,KAAM,UACN+B,SAAUoJ,EAAqBpJ,WAEhC0I,EAAe,OAAQO,IAIxBX,EAAkB1K,KAAI2L,EAAC,CAAC,EAAI7L,GAC7B,MACC8K,EAAS,OAAQS,GACZN,EAAkBjL,EAAMgB,SAK5BgK,EAAgBS,IAAIF,EAASvL,GAH7B4K,EAAkB1K,KAAI2L,EAAC,CAAC,EAAI7L,GAM/B,MAEK,GAAmB,eAAfA,EAAMO,MAAkD,KAAzBP,EAAMyC,eAAuB,CACpE,IAAMqJ,EAAc9L,EAAM0C,OAAS,GACnC,IAAKoJ,GAAeb,EAAkBjL,EAAMgB,SAAU,CAAE,IACP+K,EADOC,EAAAb,EACtBH,GAAe,IAAhD,IAAAgB,EAAAZ,MAAAW,EAAAC,EAAAX,KAAAC,MAAkD,KAAAW,EAAAC,EAAAH,EAAArJ,MAAA,GAAtC6I,EAAOU,EAAA,GAAEE,EAAOF,EAAA,GAEvBE,EAAQnL,UAAYhB,EAAMgB,SAAY8J,EAAUsB,IAAIb,KAEvDX,EAAkB1K,KAAK,CACtBC,UAAWH,EAAMG,UACjBwL,KAAM3L,EAAM2L,KACZC,KAAM5L,EAAM4L,KACZ5K,QAASmL,EAAQnL,QACjBqB,WAAY8J,EAAQ9J,WACpBmJ,WAAYW,EAAQX,WACpBjL,KAAM,UACN+B,SAAU6J,EAAQ7J,WAEnB0I,EAAe,OAAQO,GAEzB,CAAC,OAAAc,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,CACF,CACAtB,EAAkBjL,EAAMgB,SAAW8K,CACpC,MAGClB,EAAkB1K,KAAI2L,EAAC,CAAC,EAAI7L,GAE9B,CAEA,OAAAqM,GAAAnB,EAAAoB,EAAAD,EAAA,SAAAnB,EAAAqB,GAAA,KACgDC,EADhDC,EAAAtB,EACiCH,GAAe,IAAhD,IAAAyB,EAAArB,MAAAoB,EAAAC,EAAApB,KAAAC,MAAkD,KAAAoB,EAAAR,EAAAM,EAAA9J,MAAA,GAA7ByJ,GAAFO,EAAA,GAASA,EAAA,IAC3B9B,EAAkB1K,KAAI2L,EAAC,CAAC,EAAIM,GAC7B,CAAC,OAAAE,GAAAI,EAAAH,EAAAD,EAAA,SAAAI,EAAAF,GAAA,CAED,OAAO3B,CACR,CAiL2B+B,CA3T3B,SAAuBhC,GAEtB,IAAM7K,EAAS,GACf,IAAK,IAAM0L,KAAcb,EAAKhG,OAAQ,CACrC,IAC2CiI,EADvCjB,EAAO,EAAEkB,EAAA1B,EACOR,EAAKhG,OAAO6G,IAAW,IAA3C,IAAAqB,EAAAzB,MAAAwB,EAAAC,EAAAxB,KAAAC,MAA6C,KAAlCtL,EAAK4M,EAAAlK,MACfiJ,GAAQ3L,EAAMG,UACdH,EAAM2L,KAAOA,EACb3L,EAAMwL,WAAasB,SAAStB,EAAY,IACxC1L,EAAOI,KAAKF,EACb,CAAC,OAAAqM,GAAAQ,EAAAP,EAAAD,EAAA,SAAAQ,EAAAN,GAAA,CACF,CAGAzM,EAAOiN,MAAK,SAACC,EAAGjJ,GACf,OAAIiJ,EAAErB,KAAO5H,EAAE4H,MACN,EACEqB,EAAErB,KAAO5H,EAAE4H,KACd,EAEA,CAET,IAIA,IAGIsB,EAHAC,EAAc,EACdC,EAAc,EACdC,EAAM,IAGTH,EADGtC,EAAKxG,OAAOM,aACA,GAAK2I,EAAMzC,EAAKxG,OAAOM,aAEvB,KAAWkG,EAAKxG,OAAOI,gBAAkBoG,EAAKxG,OAAOK,eAGrE,IAAK,IAAL6I,EAAA,EAAAC,EAAoBxN,EAAMuN,EAAAC,EAAA9M,OAAA6M,IAAE,CAAvB,IAAMrN,EAAKsN,EAAAD,GACTE,EAAevN,EAAM2L,KAAOuB,EAClClN,EAAM4L,KAAOuB,EAAcI,EAAeN,EAC1CE,EAAcnN,EAAM4L,KACpBsB,EAAclN,EAAM2L,KAGD,aAAf3L,EAAMO,OACT6M,EAAM,IAAWpN,EAAMkB,oBACnByJ,EAAKxG,OAAOM,eACfwI,EAAe,GAAKG,EAAMzC,EAAKxG,OAAOM,cAGzC,CAEA,OAAO3E,CACR,CAoQmB0N,CAAc7C,IAM1B8C,EA3KP,SAA0B3N,GAAsB,IAerB4N,EAZpBC,GAHkCC,UAAApN,OAAA,QAAAoH,IAAAgG,UAAA,GAAAA,UAAA,GAAG,CAAC,GAGNC,sBAAwBzE,EAAwBD,EAEhFsE,EAAsB,GACtBK,EAAU,CAAC,EACXC,EAAY,CAAC,EACbC,EAAiB,CAAC,EAClBC,EAAiB,CAAC,EAClBC,EAAwB,CAAC5E,EAAeD,EAAaE,EAAsBC,GAE7E2E,EAAgC,CAAC,EACjCC,EAA8B,CAAC,EAAEC,EAAAlD,EAEjBrL,GAAM,IAA1B,IAAAuO,EAAAjD,MAAAsC,EAAAW,EAAAhD,KAAAC,MAA4B,KAAjBtL,EAAK0N,EAAAhL,MAOf,GALmB,eAAf1C,EAAMO,MAAkD,MAAzBP,EAAMyC,iBACxCwL,EAAejO,EAAMgB,SAAW2M,GAId,eAAf3N,EAAMO,MAAyB2N,EAAsBI,SAAStO,EAAMyC,gBAAiB,CACnFsL,EAAU/N,EAAMgB,WACpB+M,EAAU/N,EAAMgB,SAAW,CAAC,GAE7B+M,EAAU/N,EAAMgB,SAAShB,EAAMyC,gBAAkBzC,EAAM0C,MAEvD,IAAI6L,GAAkC,EAClCvO,EAAMyC,iBAAmB6G,GAAiC,IAAhBtJ,EAAM0C,MACnDyL,EAA8BnO,EAAMgB,UAAW,EACrChB,EAAMyC,iBAAmB4G,GAA+B,IAAhBrJ,EAAM0C,MACxD0L,EAA4BpO,EAAMgB,UAAW,EACnChB,EAAMyC,iBAAmB8G,GAAwB4E,EAA8BnO,EAAMgB,UAC/FmN,EAA8BnO,EAAMgB,UAAW,EAC/CuN,GAAkC,GACxBvO,EAAMyC,iBAAmB+G,GAAsB4E,EAA4BpO,EAAMgB,WAC3FoN,EAA4BpO,EAAMgB,UAAW,EAC7CuN,GAAkC,GAI/BA,GACmD,KAArDR,EAAU/N,EAAMgB,SAASsI,IAAkB,IACQ,KAAnDyE,EAAU/N,EAAMgB,SAASqI,IAAgB,KAC1C4E,EAAejO,EAAMgB,UAAY+M,EAAU/N,EAAMgB,SAASuI,IAAyBoE,IAA0BI,EAAU/N,EAAMgB,SAASwI,IAAuB,GAAK,IAEpK,CAGA,GAAmB,WAAfxJ,EAAMO,MAAoC,YAAfP,EAAMO,KAAoB,CAExD,IAAMiO,EAAwBR,EAAehO,EAAMgB,UAAY,EACzDyN,EAAwBR,EAAejO,EAAMgB,UAAY2M,EACzDe,EAAa9I,KAAK+I,MAAMH,EAAwBC,GAChDpM,EAAarC,EAAMqC,WAAaqM,EACtCjB,EAAoBvN,KAAI2L,EAAAA,EAAC,CAAC,EAAI7L,GAAK,IAAEqC,WAAAA,KAGrC,IAAMkJ,EAAU,GAAHxE,OAAM/G,EAAMwL,WAAU,KAAAzE,OAAI/G,EAAMqC,YACxCyL,EAAQ9N,EAAMgB,WAClB8M,EAAQ9N,EAAMgB,SAAW,IAAI+J,KAEX,WAAf/K,EAAMO,KACTuN,EAAQ9N,EAAMgB,SAASyK,IAAIF,EAASvL,GAEpC8N,EAAQ9N,EAAMgB,SAAQ,OAAQuK,EAEhC,MAEK,GAAmB,cAAfvL,EAAMO,KAAsB,CACpC,IAAMqO,GAAyBZ,EAAehO,EAAMgB,UAAY,IAAMiN,EAAejO,EAAMgB,UAAY2M,GAGpF,cAAf3N,EAAMO,OACTyN,EAAehO,EAAMgB,SAAWhB,EAAM0C,MAAQ,MAG/C,IAAMmM,GAAqBb,EAAehO,EAAMgB,UAAY,IAAMiN,EAAejO,EAAMgB,UAAY2M,GAG7FmB,EAAoBlJ,KAAK+I,MAAMC,GAC/BG,EAAgBnJ,KAAK+I,MAAME,GAGjC,GAAIC,IAAsBC,GAAiBjB,EAAQ9N,EAAMgB,SAAU,CAClE,IACsDgO,EADtDC,EAAA9D,EACgC2C,EAAQ9N,EAAMgB,UAAQ,IAAtD,IAAAiO,EAAA7D,MAAA4D,EAAAC,EAAA5D,KAAAC,MAAwD,KAAA4D,EAAAhD,EAAA8C,EAAAtM,MAAA,GAAnCyM,GAAFD,EAAA,GAAQA,EAAA,IAE1BzB,EAAoBvN,KAAK,CACxBC,UAAWH,EAAMG,UACjBwL,KAAM3L,EAAM2L,KACZC,KAAM5L,EAAM4L,KACZ5K,QAASmO,EAAOnO,QAChBqB,WAAY8M,EAAO9M,WAAayM,EAChCtD,WAAY2D,EAAO3D,WACnBjL,KAAM,UACN+B,SAAU6M,EAAO7M,WAGlBmL,EAAoBvN,KAAK,CACxBC,UAAWH,EAAMG,UACjBwL,KAAM3L,EAAM2L,KACZC,KAAM5L,EAAM4L,KACZ5K,QAASmO,EAAOnO,QAChBqB,WAAY8M,EAAO9M,WAAa0M,EAChCvD,WAAY2D,EAAO3D,WACnBjL,KAAM,SACN+B,SAAU6M,EAAO7M,UAEnB,CAAC,OAAA+J,GAAA4C,EAAA3C,EAAAD,EAAA,SAAA4C,EAAA1C,GAAA,CACF,CACD,MAGCkB,EAAoBvN,KAAI2L,EAAC,CAAC,EAAI7L,GAEhC,CAAC,OAAAqM,GAAAgC,EAAA/B,EAAAD,EAAA,SAAAgC,EAAA9B,GAAA,CAED,OAAOkB,CACR,CAmD6B2B,CAAiBxE,EAAmBN,GAG1DxK,EA/CP,SAAkCA,GACjC,IAE0BuP,EAFpBvB,EAAU,IAAI/C,IAAMuE,EAAAnE,EAENrL,GAAM,IAA1B,IAAAwP,EAAAlE,MAAAiE,EAAAC,EAAAjE,KAAAC,MAA4B,KAAjBtL,EAAKqP,EAAA3M,MACf,GAAmB,WAAf1C,EAAMO,MAAoC,YAAfP,EAAMO,KAAoB,CACxD,IAAMgL,EAAU,GAAHxE,OAAM/G,EAAMwL,WAAU,KAAAzE,OAAI/G,EAAMgB,QAAO,KAAA+F,OAAI/G,EAAMqC,YACxDkN,EAAczB,EAAQ1F,IAAImD,IAAY,GAE5C,GAAmB,WAAfvL,EAAMO,KACTgP,EAAYrP,KAAKF,GACjB8N,EAAQrC,IAAIF,EAASgE,QACf,GAAIA,EAAY/O,OAAS,EAAG,CAClC,IAAMgP,EAAcD,EAAYE,MAChCD,EAAYE,SAAW1P,EAAM4L,KAAO4D,EAAY5D,KACrB,IAAvB2D,EAAY/O,QACfsN,EAAO,OAAQvC,EAEjB,CACD,CACD,CAAC,OAAAc,GAAAiD,EAAAhD,EAAAD,EAAA,SAAAiD,EAAA/C,GAAA,CAED,OAAOzM,CACR,CAyBgB6P,CAAyBlC,GAIlCiC,EAAW5P,EAAOA,EAAOU,OAAS,GAAGoL,KACrCgE,EAAY,IAAI7E,IAChB8E,EAAa,CAAC,EACdC,EAAoB,IAAI/E,IACxBgF,EAAsB,IAAIhF,IAC1BiF,EAAa,GAQnB,SAASC,IAAsC,IAAAC,EAA7B1E,EAAUoC,UAAApN,OAAA,QAAAoH,IAAAgG,UAAA,GAAAA,UAAA,GAAG,EAAG5M,EAAO4M,UAAApN,OAAA,QAAAoH,IAAAgG,UAAA,GAAAA,UAAA,GAAG,EACrCuC,EAAkBL,EAAkB1H,IAAI,GAADrB,OAAI/F,EAAO,KAAA+F,OAAIyE,IACtD4E,EAAoBL,EAAoB3H,IAAIpH,GAC5CqP,OAAkCzI,IAApBuI,EAAiCA,EAAmBC,GAAqB,EACvFE,EAAW,GAAHvJ,OAAMyE,EAAU,KAAAzE,OAAI/F,EAAO,KAAA+F,OAAIsJ,GAEvCE,EAAyC,KAAzB5F,SAAY,QAARuF,EAAJvF,EAAMxG,cAAM,IAAA+L,OAAA,EAAZA,EAAc9L,QAA6B,IAAZpD,GAA6B,KAAZA,EAA+B,IAAZA,EAGzF,GAAK4O,EAAUxD,IAAIkE,GAclB,OAAOV,EAAUxH,IAAIkI,GAbrB,IAAMxL,EAAQ,CACb0L,KAAM,GACNhF,WAAAA,EACAxK,QAAAA,EACAqP,WAAAA,EACAE,aAAAA,EACAE,MAAO,IAGR,OADAb,EAAUnE,IAAI6E,EAAUxL,GACjBA,CAMT,CAGA,IAC0B4L,EADtBC,EAAc,KAAKC,EAAAzF,EACHrL,GAAM,IAA1B,IAAA8Q,EAAAxF,MAAAsF,EAAAE,EAAAvF,KAAAC,MAA4B,KAAjBtL,EAAK0Q,EAAAhO,MACf,OAAQ1C,EAAMO,MACb,IAAK,SACU0P,EAASjQ,EAAMwL,WAAYxL,EAAMgB,SACzCyP,MAAMvQ,KAAK,CAChB0L,KAAM5L,EAAM4L,KACZ8D,SAAU1P,EAAM0P,SAChB3N,IAAK/B,EAAMqC,WACXC,SAAUtC,EAAMsC,WAEjB,MAED,IAAK,gBACJwN,EAAkBrE,IAAI,GAAD1E,OAAI/G,EAAMgB,QAAO,KAAA+F,OAAI/G,EAAMwL,YAAcxL,EAAM2C,eACpEoN,EAAoBtE,IAAIzL,EAAMgB,QAAShB,EAAM2C,eAC7C,MAED,IAAK,gBACJgO,EAAc3Q,EAAMgB,QACpB,MAED,IAAK,iBAGiC4G,IAAjCiI,EAAW7P,EAAMwL,cACpBqE,EAAW7P,EAAMwL,YAAc,CAAC,GAEjCqE,EAAW7P,EAAMwL,YAAYmF,GAAe,GAAK3Q,EAAMc,KAAK+P,OAC5D,MAED,IAAK,OAEJ,IAAMC,EAAU9Q,EAAMc,KAAKiQ,MAAM,YAC7BD,GACHd,EAAW9P,KAAK4Q,EAAQ,IAK5B,CAEA,OAAAzE,GAAAuE,EAAAtE,EAAAD,EAAA,SAAAuE,EAAArE,GAAA,CACA7B,EAASsF,EAAWxP,OAAS,EAC1BwP,EAAWgB,KAAK,OAAOH,OAra3B,SAAyBxG,GACxB,OAAOA,EAASJ,QAAQ,QAAS,KAAKA,QAAQ,kBAAmB,IAAIA,QAAQ,gBAAgB,SAAUgH,GACtG,OAAOA,EAAGC,aACX,IAAGL,MACJ,CAkaIM,CAAgB9G,GAGnB,IAAM1F,EAASqC,MAAMoK,KAAKxB,GAAW,SAAAyB,GAAA,IAAAC,EAAApF,EAAAmF,EAAA,GAAiB,OAAPC,EAAA,GAAOA,EAAA,EAAW,IAAEC,QAAO,SAAAzM,GAAK,OAAKA,EAAM2L,MAAMjQ,OAAS,CAAC,IAC1GmE,EAAOoI,MAAK,SAACC,EAAGjJ,GAGf,OAF+B,IAAfiJ,EAAExB,WAAmC,IAAZwB,EAAEhM,QAAiBgM,EAAEqD,WAC/B,IAAftM,EAAEyH,WAAmC,IAAZzH,EAAE/C,QAAiB+C,EAAEsM,YAErD,EAED,CAET,IAEA,IAC0BmB,EAD1BC,EAAAtG,EACoBxG,GAAM,IAA1B,IAAA8M,EAAArG,MAAAoG,EAAAC,EAAApG,KAAAC,MAA4B,KAAjBxG,EAAK0M,EAAA9O,MACfoC,EAAM0L,KAAOX,EAAW/K,EAAM0G,cAAgBqE,EAAW/K,EAAM0G,YAAY1G,EAAM9D,UAAY6O,EAAW/K,EAAM0G,YAAY,KAAO,EAClI,CAEA,OAAAa,GAAAoF,EAAAnF,EAAAD,EAAA,SAAAoF,EAAAlF,GAAA,CACA,MAAO,CAAE7B,MAAAA,EAAOgF,SAAAA,EAAU/K,OAAAA,EAC3B,CAWc+M,CAAYtH,EAAWC,EAAUC,GAE1CqH,EAAa,GAGjBA,GAAc9I,EAGd8I,GAAc9H,EAAWU,EAAKG,OAG9BiH,GAAclI,EAAWP,EAAe,GAGxCyI,GAAclI,EAAW7D,KAAKgM,KAAKrH,EAAKmF,UAAW,GAGnD,IACkCmC,EAD5BlN,EAAS,GAAGmN,EAAA3G,EACKZ,EAAK5F,QAAM,IAAlC,IAAAmN,EAAA1G,MAAAyG,EAAAC,EAAAzG,KAAAC,MAAoC,KAAzByG,EAAQF,EAAAnP,MACZoC,EAAQ,CAAC,EAGXiN,EAASxB,aAEZzL,EAAMuL,WAAa0B,EAAS1B,WAAa,IAEzCvL,EAAMuL,WAAa0B,EAAS1B,WAE7BvL,EAAMyL,aAAewB,EAASxB,aAG9BzL,EAAM9D,QAAU+Q,EAAS/Q,QAAU,EAGnC8D,EAAM0L,KAAOuB,EAASvB,MAAQ,GAG9B,IAEoCwB,EAFhCC,EAAS,EACPxB,EAAQ,GAAGyB,EAAA/G,EACK4G,EAAStB,OAAK,IAApC,IAAAyB,EAAA9G,MAAA4G,EAAAE,EAAA7G,KAAAC,MAAsC,KAA3B6G,EAAOH,EAAAtP,MACX6I,EAAU4G,EAAQpQ,IAIxB,GAAIwJ,GAAW,GAAKA,EAAU,IAAK,CAOlC,IALA,IAAI6G,EAAWD,EAAQvG,KAAOqG,EACxBI,EAAezM,KAAKrE,IAAI4Q,EAAQzC,SAAU3G,GAG5CuJ,EAAa,GACVF,EAAWnJ,GACjBqJ,GAAc7I,EAAW,IAAM,GAC/B2I,GAAYnJ,EACZgJ,GAAUhJ,EAIX,IAAMsJ,EAAa3M,KAAK+I,MAAMyD,EAAWpJ,GACnCwJ,EAAcD,EAAavJ,EAG3ByJ,EAAmB7M,KAAK8M,IAAI,EAAGL,EAAeD,EAAWI,GACzDG,EAAiB/M,KAAKC,MAAM4M,EAAmB3J,GAG/C8J,EAAaD,EAAiB,KAAQpH,EAAU,IAChDsH,EAAeD,EAAa,IAAO,EAGzCnC,EAAMvQ,KACLoS,EACA7I,EAAW8B,EAAUsH,EAAc,GACnCpJ,EAAW8I,EAAY,GACvB9I,EAAWkJ,EAAgBC,EAAa,EAAI,GAE9C,CACD,CAAC,OAAAvG,GAAA6F,EAAA5F,EAAAD,EAAA,SAAA6F,EAAA3F,GAAA,CACDzH,EAAM2L,MAAQA,EAEd9L,EAAOzE,KAAK4E,EACb,CAEA,OAAAuH,GAAAyF,EAAAxF,EAAAD,EAAA,SAAAyF,EAAAvF,GAAA,CACA,GAAI5H,EAAOnE,OAAS,IACnB,KAAM,2CAEPmR,GAAclI,EAAW9E,EAAOnE,OAAQ,GAGxC,IAAK,IAALsS,EAAA,EAAAC,EAAoBpO,EAAMmO,EAAAC,EAAAvS,OAAAsS,IAAE,CAAvB,IAAMhO,EAAKiO,EAAAD,GACf,GAAIhO,EAAM2L,MAAMjQ,OAAS,MACxB,KAAM,6CAGPmR,GAAclI,EAAW3E,EAAMuL,WAAY,GAC3CsB,GAAclI,EAAW3E,EAAM9D,QAAS,GACxC2Q,GAAclI,EAAW3E,EAAM2L,MAAMjQ,OAAQ,EAC9C,CAGA,IAAK,IAALwS,EAAA,EAAAC,EAAoBtO,EAAMqO,EAAAC,EAAAzS,OAAAwS,IACzBrB,GADesB,EAAAD,GACKvC,MAAMO,KAAK,IAIhC,IAAK,IAALkC,EAAA,EAAAC,EAAoBxO,EAAMuO,EAAAC,EAAA3S,OAAA0S,IACzBvB,GAAc9H,EADCsJ,EAAAD,GACgB1C,MAGhC,OAAOmB,CACR,C","sources":["webpack://MusicianMidiConverter/webpack/universalModuleDefinition","webpack://MusicianMidiConverter/./src/lib/midi-file/index.js","webpack://MusicianMidiConverter/./src/lib/midi-file/lib/midi-parser.js","webpack://MusicianMidiConverter/./src/lib/midi-file/lib/midi-writer.js","webpack://MusicianMidiConverter/webpack/bootstrap","webpack://MusicianMidiConverter/webpack/runtime/define property getters","webpack://MusicianMidiConverter/webpack/runtime/hasOwnProperty shorthand","webpack://MusicianMidiConverter/webpack/runtime/make namespace object","webpack://MusicianMidiConverter/./src/musician-midi-converter.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MusicianMidiConverter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MusicianMidiConverter\"] = factory();\n\telse\n\t\troot[\"MusicianMidiConverter\"] = factory();\n})(this, () => {\nreturn ","exports.parseMidi = require('./lib/midi-parser')\r\nexports.writeMidi = require('./lib/midi-writer')\r\n","// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\r\n\r\nfunction parseMidi(data) {\r\n  var p = new Parser(data)\r\n\r\n  var headerChunk = p.readChunk()\r\n  if (headerChunk.id != 'MThd')\r\n    throw \"Bad MIDI file.  Expected 'MHdr', got: '\" + headerChunk.id + \"'\"\r\n  var header = parseHeader(headerChunk.data)\r\n\r\n  var tracks = []\r\n  for (var i=0; !p.eof() && i < header.numTracks; i++) {\r\n    var trackChunk = p.readChunk()\r\n    if (trackChunk.id != 'MTrk')\r\n      throw \"Bad MIDI file.  Expected 'MTrk', got: '\" + trackChunk.id + \"'\"\r\n    var track = parseTrack(trackChunk.data)\r\n    tracks.push(track)\r\n  }\r\n\r\n  return {\r\n    header: header,\r\n    tracks: tracks\r\n  }\r\n}\r\n\r\n\r\nfunction parseHeader(data) {\r\n  var p = new Parser(data)\r\n\r\n  var format = p.readUInt16()\r\n  var numTracks = p.readUInt16()\r\n\r\n  var result = {\r\n    format: format,\r\n    numTracks: numTracks\r\n  }\r\n\r\n  var timeDivision = p.readUInt16()\r\n  if (timeDivision & 0x8000) {\r\n    result.framesPerSecond = 0x100 - (timeDivision >> 8)\r\n    result.ticksPerFrame = timeDivision & 0xFF\r\n  } else {\r\n    result.ticksPerBeat = timeDivision\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nfunction parseTrack(data) {\r\n  var p = new Parser(data)\r\n\r\n  var events = []\r\n  while (!p.eof()) {\r\n    var event = readEvent()\r\n    events.push(event)\r\n  }\r\n\r\n  return events\r\n\r\n  var lastEventTypeByte = null\r\n\r\n  function readEvent() {\r\n    var event = {}\r\n    event.deltaTime = p.readVarInt()\r\n\r\n    var eventTypeByte = p.readUInt8()\r\n\r\n    if ((eventTypeByte & 0xf0) === 0xf0) {\r\n      // system / meta event\r\n      if (eventTypeByte === 0xff) {\r\n        // meta event\r\n        event.meta = true\r\n        var metatypeByte = p.readUInt8()\r\n        var length = p.readVarInt()\r\n        switch (metatypeByte) {\r\n          case 0x00:\r\n            event.type = 'sequenceNumber'\r\n            if (length !== 2) throw \"Expected length for sequenceNumber event is 2, got \" + length\r\n            event.number = p.readUInt16()\r\n            return event\r\n          case 0x01:\r\n            event.type = 'text'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x02:\r\n            event.type = 'copyrightNotice'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x03:\r\n            event.type = 'trackName'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x04:\r\n            event.type = 'instrumentName'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x05:\r\n            event.type = 'lyrics'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x06:\r\n            event.type = 'marker'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x07:\r\n            event.type = 'cuePoint'\r\n            event.text = p.readString(length)\r\n            return event\r\n          case 0x20:\r\n            event.type = 'channelPrefix'\r\n            if (length != 1) throw \"Expected length for channelPrefix event is 1, got \" + length\r\n            event.channel = p.readUInt8()\r\n            return event\r\n          case 0x21:\r\n            event.type = 'portPrefix'\r\n            if (length != 1) throw \"Expected length for portPrefix event is 1, got \" + length\r\n            event.port = p.readUInt8()\r\n            return event\r\n          case 0x2f:\r\n            event.type = 'endOfTrack'\r\n            if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length\r\n            return event\r\n          case 0x51:\r\n            event.type = 'setTempo';\r\n            if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length\r\n            event.microsecondsPerBeat = p.readUInt24()\r\n            return event\r\n          case 0x54:\r\n            event.type = 'smpteOffset';\r\n            if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length\r\n            var hourByte = p.readUInt8()\r\n            var FRAME_RATES = { 0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30 }\r\n            event.frameRate = FRAME_RATES[hourByte & 0x60]\r\n            event.hour = hourByte & 0x1f\r\n            event.min = p.readUInt8()\r\n            event.sec = p.readUInt8()\r\n            event.frame = p.readUInt8()\r\n            event.subFrame = p.readUInt8()\r\n            return event\r\n          case 0x58:\r\n            event.type = 'timeSignature'\r\n            if (length != 2 && length != 4) throw \"Expected length for timeSignature event is 4 or 2, got \" + length\r\n            event.numerator = p.readUInt8()\r\n            event.denominator = (1 << p.readUInt8())\r\n            if (length === 4) {\r\n              event.metronome = p.readUInt8()\r\n              event.thirtyseconds = p.readUInt8()\r\n            } else {\r\n              event.metronome = 0x24\r\n              event.thirtyseconds = 0x08\r\n            }\r\n            return event\r\n          case 0x59:\r\n            event.type = 'keySignature'\r\n            if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length\r\n            event.key = p.readInt8()\r\n            event.scale = p.readUInt8()\r\n            return event\r\n          case 0x7f:\r\n            event.type = 'sequencerSpecific'\r\n            event.data = p.readBytes(length)\r\n            return event\r\n          default:\r\n            event.type = 'unknownMeta'\r\n            event.data = p.readBytes(length)\r\n            event.metatypeByte = metatypeByte\r\n            return event\r\n        }\r\n      } else if (eventTypeByte == 0xf0) {\r\n        event.type = 'sysEx'\r\n        var length = p.readVarInt()\r\n        event.data = p.readBytes(length)\r\n        return event\r\n      } else if (eventTypeByte == 0xf7) {\r\n        event.type = 'endSysEx'\r\n        var length = p.readVarInt()\r\n        event.data = p.readBytes(length)\r\n        return event\r\n      } else {\r\n        throw \"Unrecognised MIDI event type byte: \" + eventTypeByte\r\n      }\r\n    } else {\r\n      // channel event\r\n      var param1\r\n      if ((eventTypeByte & 0x80) === 0) {\r\n        // running status - reuse lastEventTypeByte as the event type.\r\n        // eventTypeByte is actually the first parameter\r\n        if (lastEventTypeByte === null)\r\n          throw \"Running status byte encountered before status byte\"\r\n        param1 = eventTypeByte\r\n        eventTypeByte = lastEventTypeByte\r\n        event.running = true\r\n      } else {\r\n        param1 = p.readUInt8()\r\n        lastEventTypeByte = eventTypeByte\r\n      }\r\n      var eventType = eventTypeByte >> 4\r\n      event.channel = eventTypeByte & 0x0f\r\n      switch (eventType) {\r\n        case 0x08:\r\n          event.type = 'noteOff'\r\n          event.noteNumber = param1\r\n          event.velocity = p.readUInt8()\r\n          return event\r\n        case 0x09:\r\n          var velocity = p.readUInt8()\r\n          event.type = velocity === 0 ? 'noteOff' : 'noteOn'\r\n          event.noteNumber = param1\r\n          event.velocity = velocity\r\n          if (velocity === 0) event.byte9 = true\r\n          return event\r\n        case 0x0a:\r\n          event.type = 'noteAftertouch'\r\n          event.noteNumber = param1\r\n          event.amount = p.readUInt8()\r\n          return event\r\n        case 0x0b:\r\n          event.type = 'controller'\r\n          event.controllerType = param1\r\n          event.value = p.readUInt8()\r\n          return event\r\n        case 0x0c:\r\n          event.type = 'programChange'\r\n          event.programNumber = param1\r\n          return event\r\n        case 0x0d:\r\n          event.type = 'channelAftertouch'\r\n          event.amount = param1\r\n          return event\r\n        case 0x0e:\r\n          event.type = 'pitchBend'\r\n          event.value = (param1 + (p.readUInt8() << 7)) - 0x2000\r\n          return event\r\n        default:\r\n          throw \"Unrecognised MIDI event type: \" + eventType\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction Parser(data) {\r\n  this.buffer = data\r\n  this.bufferLen = this.buffer.length\r\n  this.pos = 0\r\n}\r\n\r\nParser.prototype.eof = function() {\r\n  return this.pos >= this.bufferLen\r\n}\r\n\r\nParser.prototype.readUInt8 = function() {\r\n  var result = this.buffer[this.pos]\r\n  this.pos += 1\r\n  return result\r\n}\r\n\r\nParser.prototype.readInt8 = function() {\r\n  var u = this.readUInt8()\r\n  if (u & 0x80)\r\n    return u - 0x100\r\n  else\r\n    return u\r\n}\r\n\r\nParser.prototype.readUInt16 = function() {\r\n  var b0 = this.readUInt8(),\r\n      b1 = this.readUInt8()\r\n\r\n    return (b0 << 8) + b1\r\n}\r\n\r\nParser.prototype.readInt16 = function() {\r\n  var u = this.readUInt16()\r\n  if (u & 0x8000)\r\n    return u - 0x10000\r\n  else\r\n    return u\r\n}\r\n\r\nParser.prototype.readUInt24 = function() {\r\n  var b0 = this.readUInt8(),\r\n      b1 = this.readUInt8(),\r\n      b2 = this.readUInt8()\r\n\r\n    return (b0 << 16) + (b1 << 8) + b2\r\n}\r\n\r\nParser.prototype.readInt24 = function() {\r\n  var u = this.readUInt24()\r\n  if (u & 0x800000)\r\n    return u - 0x1000000\r\n  else\r\n    return u\r\n}\r\n\r\nParser.prototype.readUInt32 = function() {\r\n  var b0 = this.readUInt8(),\r\n      b1 = this.readUInt8(),\r\n      b2 = this.readUInt8(),\r\n      b3 = this.readUInt8()\r\n\r\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3\r\n}\r\n\r\nParser.prototype.readBytes = function(len) {\r\n  var bytes = this.buffer.slice(this.pos, this.pos + len)\r\n  this.pos += len\r\n  return bytes\r\n}\r\n\r\nParser.prototype.readString = function(len) {\r\n  // Strings can be multibyte-encoded or not.\r\n  // Decode using both ways and return the most relevant one.\r\n  var bytes = this.readBytes(len)\r\n  var multibyteString = new TextDecoder().decode(bytes)\r\n  var singlebyteString = String.fromCharCode.apply(null, bytes)\r\n  if (singlebyteString.length > multibyteString.length) {\r\n    return multibyteString\r\n  }\r\n  return singlebyteString\r\n}\r\n\r\nParser.prototype.readVarInt = function() {\r\n  var result = 0\r\n  while (!this.eof()) {\r\n    var b = this.readUInt8()\r\n    if (b & 0x80) {\r\n      result += (b & 0x7f)\r\n      result <<= 7\r\n    } else {\r\n      // b is last byte\r\n      return result + b\r\n    }\r\n  }\r\n  // premature eof\r\n  return result\r\n}\r\n\r\nParser.prototype.readChunk = function() {\r\n  var id = this.readString(4)\r\n  var length = this.readUInt32()\r\n  var data = this.readBytes(length)\r\n  return {\r\n    id: id,\r\n    length: length,\r\n    data: data\r\n  }\r\n}\r\n\r\nmodule.exports = parseMidi\r\n","// data should be the same type of format returned by parseMidi\r\n// for maximum compatibililty, returns an array of byte values, suitable for conversion to Buffer, Uint8Array, etc.\r\n\r\n// opts:\r\n// - running              reuse previous eventTypeByte when possible, to compress file\r\n// - useByte9ForNoteOff   use 0x09 for noteOff when velocity is zero\r\n\r\nfunction writeMidi(data, opts) {\r\n  if (typeof data !== 'object')\r\n    throw 'Invalid MIDI data'\r\n\r\n  opts = opts || {}\r\n\r\n  var header = data.header || {}\r\n  var tracks = data.tracks || []\r\n  var i, len = tracks.length\r\n\r\n  var w = new Writer()\r\n  writeHeader(w, header, len)\r\n\r\n  for (i=0; i < len; i++) {\r\n    writeTrack(w, tracks[i], opts)\r\n  }\r\n\r\n  return w.buffer\r\n}\r\n\r\nfunction writeHeader(w, header, numTracks) {\r\n  var format = header.format == null ? 1 : header.format\r\n\r\n  var timeDivision = 128\r\n  if (header.timeDivision) {\r\n    timeDivision = header.timeDivision\r\n  } else if (header.ticksPerFrame && header.framesPerSecond) {\r\n    timeDivision = (-(header.framesPerSecond & 0xFF) << 8) | (header.ticksPerFrame & 0xFF)\r\n  } else if (header.ticksPerBeat) {\r\n    timeDivision = header.ticksPerBeat & 0x7FFF\r\n  }\r\n\r\n  var h = new Writer()\r\n  h.writeUInt16(format)\r\n  h.writeUInt16(numTracks)\r\n  h.writeUInt16(timeDivision)\r\n\r\n  w.writeChunk('MThd', h.buffer)\r\n}\r\n\r\nfunction writeTrack(w, track, opts) {\r\n  var t = new Writer()\r\n  var i, len = track.length\r\n  var eventTypeByte = null\r\n  for (i=0; i < len; i++) {\r\n    // Reuse last eventTypeByte when opts.running is set, or event.running is explicitly set on it.\r\n    // parseMidi will set event.running for each event, so that we can get an exact copy by default.\r\n    // Explicitly set opts.running to false, to override event.running and never reuse last eventTypeByte.\r\n    if (opts.running === false || !opts.running && !track[i].running) eventTypeByte = null\r\n\r\n    eventTypeByte = writeEvent(t, track[i], eventTypeByte, opts.useByte9ForNoteOff)\r\n  }\r\n  w.writeChunk('MTrk', t.buffer)\r\n}\r\n\r\nfunction writeEvent(w, event, lastEventTypeByte, useByte9ForNoteOff) {\r\n  var type = event.type\r\n  var deltaTime = event.deltaTime\r\n  var text = event.text || ''\r\n  var data = event.data || []\r\n  var eventTypeByte = null\r\n  w.writeVarInt(deltaTime)\r\n\r\n  switch (type) {\r\n    // meta events\r\n    case 'sequenceNumber':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x00)\r\n      w.writeVarInt(2)\r\n      w.writeUInt16(event.number)\r\n      break;\r\n\r\n    case 'text':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x01)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'copyrightNotice':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x02)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'trackName':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x03)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'instrumentName':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x04)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'lyrics':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x05)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'marker':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x06)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'cuePoint':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x07)\r\n      w.writeVarInt(text.length)\r\n      w.writeString(text)\r\n      break;\r\n\r\n    case 'channelPrefix':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x20)\r\n      w.writeVarInt(1)\r\n      w.writeUInt8(event.channel)\r\n      break;\r\n\r\n    case 'portPrefix':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x21)\r\n      w.writeVarInt(1)\r\n      w.writeUInt8(event.port)\r\n      break;\r\n\r\n    case 'endOfTrack':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x2F)\r\n      w.writeVarInt(0)\r\n      break;\r\n\r\n    case 'setTempo':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x51)\r\n      w.writeVarInt(3)\r\n      w.writeUInt24(event.microsecondsPerBeat)\r\n      break;\r\n\r\n    case 'smpteOffset':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x54)\r\n      w.writeVarInt(5)\r\n      var FRAME_RATES = { 24: 0x00, 25: 0x20, 29: 0x40, 30: 0x60 }\r\n      var hourByte = (event.hour & 0x1F) | FRAME_RATES[event.frameRate]\r\n      w.writeUInt8(hourByte)\r\n      w.writeUInt8(event.min)\r\n      w.writeUInt8(event.sec)\r\n      w.writeUInt8(event.frame)\r\n      w.writeUInt8(event.subFrame)\r\n      break;\r\n\r\n    case 'timeSignature':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x58)\r\n      w.writeVarInt(4)\r\n      w.writeUInt8(event.numerator)\r\n      var denominator = Math.floor((Math.log(event.denominator) / Math.LN2)) & 0xFF\r\n      w.writeUInt8(denominator)\r\n      w.writeUInt8(event.metronome)\r\n      w.writeUInt8(event.thirtyseconds || 8)\r\n      break;\r\n\r\n    case 'keySignature':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x59)\r\n      w.writeVarInt(2)\r\n      w.writeInt8(event.key)\r\n      w.writeUInt8(event.scale)\r\n      break;\r\n\r\n    case 'sequencerSpecific':\r\n      w.writeUInt8(0xFF)\r\n      w.writeUInt8(0x7F)\r\n      w.writeVarInt(data.length)\r\n      w.writeBytes(data)\r\n      break;\r\n\r\n    case 'unknownMeta':\r\n      if (event.metatypeByte != null) {\r\n        w.writeUInt8(0xFF)\r\n        w.writeUInt8(event.metatypeByte)\r\n        w.writeVarInt(data.length)\r\n        w.writeBytes(data)\r\n      }\r\n      break;\r\n\r\n    // system-exclusive\r\n    case 'sysEx':\r\n      w.writeUInt8(0xF0)\r\n      w.writeVarInt(data.length)\r\n      w.writeBytes(data)\r\n      break;\r\n\r\n    case 'endSysEx':\r\n      w.writeUInt8(0xF7)\r\n      w.writeVarInt(data.length)\r\n      w.writeBytes(data)\r\n      break;\r\n\r\n    // channel events\r\n    case 'noteOff':\r\n      // Use 0x90 when opts.useByte9ForNoteOff is set and velocity is zero, or when event.byte9 is explicitly set on it.\r\n      // parseMidi will set event.byte9 for each event, so that we can get an exact copy by default.\r\n      // Explicitly set opts.useByte9ForNoteOff to false, to override event.byte9 and always use 0x80 for noteOff events.\r\n      var noteByte = ((useByte9ForNoteOff !== false && event.byte9) || (useByte9ForNoteOff && event.velocity == 0)) ? 0x90 : 0x80\r\n\r\n      eventTypeByte = noteByte | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.noteNumber)\r\n      w.writeUInt8(event.velocity)\r\n      break;\r\n\r\n    case 'noteOn':\r\n      eventTypeByte = 0x90 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.noteNumber)\r\n      w.writeUInt8(event.velocity)\r\n      break;\r\n\r\n    case 'noteAftertouch':\r\n      eventTypeByte = 0xA0 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.noteNumber)\r\n      w.writeUInt8(event.amount)\r\n      break;\r\n\r\n    case 'controller':\r\n      eventTypeByte = 0xB0 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.controllerType)\r\n      w.writeUInt8(event.value)\r\n      break;\r\n\r\n    case 'programChange':\r\n      eventTypeByte = 0xC0 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.programNumber)\r\n      break;\r\n\r\n    case 'channelAftertouch':\r\n      eventTypeByte = 0xD0 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      w.writeUInt8(event.amount)\r\n      break;\r\n\r\n    case 'pitchBend':\r\n      eventTypeByte = 0xE0 | event.channel\r\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\r\n      var value14 = 0x2000 + event.value\r\n      var lsb14 = (value14 & 0x7F)\r\n      var msb14 = (value14 >> 7) & 0x7F\r\n      w.writeUInt8(lsb14)\r\n      w.writeUInt8(msb14)\r\n    break;\r\n\r\n    default:\r\n      throw 'Unrecognized event type: ' + type\r\n  }\r\n  return eventTypeByte\r\n}\r\n\r\n\r\nfunction Writer() {\r\n  this.buffer = []\r\n}\r\n\r\nWriter.prototype.writeUInt8 = function(v) {\r\n  this.buffer.push(v & 0xFF)\r\n}\r\nWriter.prototype.writeInt8 = Writer.prototype.writeUInt8\r\n\r\nWriter.prototype.writeUInt16 = function(v) {\r\n  var b0 = (v >> 8) & 0xFF,\r\n      b1 = v & 0xFF\r\n\r\n  this.writeUInt8(b0)\r\n  this.writeUInt8(b1)\r\n}\r\nWriter.prototype.writeInt16 = Writer.prototype.writeUInt16\r\n\r\nWriter.prototype.writeUInt24 = function(v) {\r\n  var b0 = (v >> 16) & 0xFF,\r\n      b1 = (v >> 8) & 0xFF,\r\n      b2 = v & 0xFF\r\n\r\n  this.writeUInt8(b0)\r\n  this.writeUInt8(b1)\r\n  this.writeUInt8(b2)\r\n}\r\nWriter.prototype.writeInt24 = Writer.prototype.writeUInt24\r\n\r\nWriter.prototype.writeUInt32 = function(v) {\r\n  var b0 = (v >> 24) & 0xFF,\r\n      b1 = (v >> 16) & 0xFF,\r\n      b2 = (v >> 8) & 0xFF,\r\n      b3 = v & 0xFF\r\n\r\n  this.writeUInt8(b0)\r\n  this.writeUInt8(b1)\r\n  this.writeUInt8(b2)\r\n  this.writeUInt8(b3)\r\n}\r\nWriter.prototype.writeInt32 = Writer.prototype.writeUInt32\r\n\r\n\r\nWriter.prototype.writeBytes = function(arr) {\r\n  this.buffer = this.buffer.concat(Array.prototype.slice.call(arr, 0))\r\n}\r\n\r\nWriter.prototype.writeString = function(str) {\r\n  var i, len = str.length, arr = []\r\n  for (i=0; i < len; i++) {\r\n    arr.push(str.codePointAt(i))\r\n  }\r\n  this.writeBytes(arr)\r\n}\r\n\r\nWriter.prototype.writeVarInt = function(v) {\r\n  if (v < 0) throw \"Cannot write negative variable-length integer\"\r\n\r\n  if (v <= 0x7F) {\r\n    this.writeUInt8(v)\r\n  } else {\r\n    var i = v\r\n    var bytes = []\r\n    bytes.push(i & 0x7F)\r\n    i >>= 7\r\n    while (i) {\r\n      var b = i & 0x7F | 0x80\r\n      bytes.push(b)\r\n      i >>= 7\r\n    }\r\n    this.writeBytes(bytes.reverse())\r\n  }\r\n}\r\n\r\nWriter.prototype.writeChunk = function(id, data) {\r\n  this.writeString(id)\r\n  this.writeUInt32(data.length)\r\n  this.writeBytes(data)\r\n}\r\n\r\nmodule.exports = writeMidi\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const parseMidi = require('./lib/midi-file/index').parseMidi;\r\n\r\nexport const CONVERTER_VERSION = '8.8';\r\n\r\nconst FILE_HEADER = 'MUS8';\r\nconst MAX_NOTE_DURATION = 6;\r\nconst NOTE_DURATION_FPS = 255 / MAX_NOTE_DURATION; // 8-bit\r\nconst MAX_LONG_NOTE_DURATION = 255 * MAX_NOTE_DURATION;\r\nconst NOTE_TIME_FPS = 240;\r\nconst MAX_NOTE_TIME = 65535 / NOTE_TIME_FPS; // 16-bit\r\nconst MODE_DURATION = 0x10;\r\n\r\nconst DEFAULT_PITCH_BEND_RANGE = 2;\r\nconst FULL_PITCH_BEND_RANGE = 12;\r\n\r\nconst CC_RPN_FINE = 0x64;\r\nconst CC_RPN_COARSE = 0x65;\r\nconst CC_DATA_ENTRY_COARSE = 0x06;\r\nconst CC_DATA_ENTRY_FINE = 0x26;\r\n\r\n/**\r\n * Pack an integer number into a binary string.\r\n * @param {integer} num integer to pack\r\n * @param {integer} bytes number of bytes\r\n * @returns {string}\r\n */\r\nfunction packNumber(num, bytes) {\r\n\tnum = num & (Math.pow(256, bytes) - 1);\r\n\tlet packed = '';\r\n\tfor (let b = 0; b < bytes; b++) {\r\n\t\tpacked = String.fromCharCode(num & 0xFF) + packed;\r\n\t\tnum = num >> 8;\r\n\t}\r\n\treturn packed;\r\n}\r\n\r\n/**\r\n * Pack a time or duration in seconds into a binary string.\r\n * @param {number} seconds\r\n * @param {int} bytes number of bytes\r\n * @param {number} fps precision in frames par second\r\n * @returns {string}\r\n */\r\nfunction packTime(seconds, bytes, fps) {\r\n\treturn packNumber(Math.round(seconds * fps), bytes);\r\n}\r\n\r\n/**\r\n * Pack a string into binary.\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nfunction packString(str) {\r\n\tconst utf8Str = utf8Encode(str);\r\n\treturn packNumber(utf8Str.length, 2) + utf8Str;\r\n}\r\n\r\n/**\r\n * Encode string into UTF-8.\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nfunction utf8Encode(str) {\r\n\treturn unescape(encodeURIComponent(str)).replace(/\\u0000+$/, '');\r\n}\r\n\r\n/**\r\n * Format file name into a title.\r\n * @param {string} fileName\r\n * @returns {string}\r\n */\r\nfunction filenameToTitle(fileName) {\r\n\treturn fileName.replace(/[_]+/g, ' ').replace(/\\.[a-zA-Z0-9]+$/, '').replace(/^(.)|\\s+(.)/g, function ($1) {\r\n\t\treturn $1.toUpperCase();\r\n\t}).trim();\r\n}\r\n\r\n/**\r\n * Extract events from parsed MIDI file into an ordered flat array with timestamps in seconds.\r\n * @param {object} midi parsed MIDI file\r\n * @returns {array}\r\n */\r\nfunction extractEvents(midi) {\r\n\t// Extract all events as a flat array\r\n\tconst events = [];\r\n\tfor (const trackIndex in midi.tracks) {\r\n\t\tlet tick = 0;\r\n\t\tfor (const event of midi.tracks[trackIndex]) {\r\n\t\t\ttick += event.deltaTime;\r\n\t\t\tevent.tick = tick;\r\n\t\t\tevent.trackIndex = parseInt(trackIndex, 10);\r\n\t\t\tevents.push(event);\r\n\t\t}\r\n\t}\r\n\r\n\t// Sort events in chronological order\r\n\tevents.sort((a, b) => {\r\n\t\tif (a.tick < b.tick) {\r\n\t\t\treturn -1;\r\n\t\t} else if (a.tick > b.tick) {\r\n\t\t\treturn 1;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t});\r\n\r\n\t// Convert event timings into seconds\r\n\r\n\tlet currentTick = 0;\r\n\tlet currentTime = 0;\r\n\tlet bpm = 120;\r\n\tlet tickDuration;\r\n\tif (midi.header.ticksPerBeat) {\r\n\t\ttickDuration = 60 / bpm / midi.header.ticksPerBeat;\r\n\t} else {\r\n\t\ttickDuration = 1000000 / (midi.header.framesPerSecond * midi.header.ticksPerFrame);\r\n\t}\r\n\r\n\tfor (const event of events) {\r\n\t\tconst relativeTick = event.tick - currentTick;\r\n\t\tevent.time = currentTime + relativeTick * tickDuration;\r\n\t\tcurrentTime = event.time;\r\n\t\tcurrentTick = event.tick;\r\n\r\n\t\t// Handle tempo change\r\n\t\tif (event.type === 'setTempo') {\r\n\t\t\tbpm = 60000000 / event.microsecondsPerBeat;\r\n\t\t\tif (midi.header.ticksPerBeat) {\r\n\t\t\t\ttickDuration = 60 / bpm / midi.header.ticksPerBeat;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn events;\r\n}\r\n\r\n/**\r\n * Replace sustain pedal events by proper noteOff events.\r\n * @param {array} events\r\n * @returns {array}\r\n */\r\nfunction processSustain(events) {\r\n\r\n\tconst eventsWithSustain = [];\r\n\tconst notesDown = new Map(); // Notes that have their piano key pushed down\r\n\tconst skippedNotesOff = new Map(); // Notes off events that were skipped because of channel sustain\r\n\tconst sustainedChannels = {}; // Channels being sustained\r\n\r\n\tfor (const event of events) {\r\n\t\t// Note events\r\n\t\tif (event.type === 'noteOn' || event.type === 'noteOff') {\r\n\t\t\tconst noteKey = `${event.channel}-${event.trackIndex}-${event.noteNumber}`;\r\n\t\t\tif (event.type === 'noteOn') {\r\n\t\t\t\tnotesDown.set(noteKey, event); // The piano key is down\r\n\r\n\t\t\t\t// There is already a noteOff awaiting for this note: insert it first\r\n\t\t\t\tconst previousNoteOffEvent = skippedNotesOff.get(noteKey);\r\n\t\t\t\tif (previousNoteOffEvent) {\r\n\t\t\t\t\teventsWithSustain.push({\r\n\t\t\t\t\t\tdeltaTime: event.deltaTime,\r\n\t\t\t\t\t\ttick: event.tick,\r\n\t\t\t\t\t\ttime: event.time,\r\n\t\t\t\t\t\tchannel: previousNoteOffEvent.channel,\r\n\t\t\t\t\t\tnoteNumber: previousNoteOffEvent.noteNumber,\r\n\t\t\t\t\t\ttrackIndex: previousNoteOffEvent.trackIndex,\r\n\t\t\t\t\t\ttype: 'noteOff',\r\n\t\t\t\t\t\tvelocity: previousNoteOffEvent.velocity,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tskippedNotesOff.delete(noteKey);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Always insert noteOn events\r\n\t\t\t\teventsWithSustain.push({ ...event });\r\n\t\t\t} else { // noteOff\r\n\t\t\t\tnotesDown.delete(noteKey); // The piano key is up\r\n\t\t\t\tif (!sustainedChannels[event.channel]) {\r\n\t\t\t\t\t// Add noteOff event if the channel is not sustained\r\n\t\t\t\t\teventsWithSustain.push({ ...event });\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Don't add noteOff event when sustained but keep if for later on pedal release\r\n\t\t\t\t\tskippedNotesOff.set(noteKey, event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Sustain pedal events\r\n\t\telse if (event.type === 'controller' && event.controllerType === 64) {\r\n\t\t\tconst isSustained = event.value >= 64;\r\n\t\t\tif (!isSustained && sustainedChannels[event.channel]) { // Sustain pedal was released\r\n\t\t\t\tfor (const [noteKey, noteOff] of skippedNotesOff) {\r\n\t\t\t\t\t// Only stop notes for the current channel and that is not held down\r\n\t\t\t\t\tif (noteOff.channel === event.channel && !notesDown.has(noteKey)) {\r\n\t\t\t\t\t\t// Add noteOff event\r\n\t\t\t\t\t\teventsWithSustain.push({\r\n\t\t\t\t\t\t\tdeltaTime: event.deltaTime,\r\n\t\t\t\t\t\t\ttick: event.tick,\r\n\t\t\t\t\t\t\ttime: event.time,\r\n\t\t\t\t\t\t\tchannel: noteOff.channel,\r\n\t\t\t\t\t\t\tnoteNumber: noteOff.noteNumber,\r\n\t\t\t\t\t\t\ttrackIndex: noteOff.trackIndex,\r\n\t\t\t\t\t\t\ttype: 'noteOff',\r\n\t\t\t\t\t\t\tvelocity: noteOff.velocity,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tskippedNotesOff.delete(noteKey);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsustainedChannels[event.channel] = isSustained;\r\n\t\t}\r\n\t\t// Other events\r\n\t\telse {\r\n\t\t\teventsWithSustain.push({ ...event });\r\n\t\t}\r\n\t}\r\n\r\n\t// Add noteOff leftovers\r\n\tfor (const [noteKey, noteOff] of skippedNotesOff) {\r\n\t\teventsWithSustain.push({ ...noteOff });\r\n\t}\r\n\r\n\treturn eventsWithSustain;\r\n}\r\n\r\n/**\r\n * Replace pitch bend events by semitone slides.\r\n * @param {array} events\r\n * @param {object} options\r\n * @param {boolean} options.useFullPitchBendRange Use full pitch bend range by default (-12/+12)\r\n * @returns {array}\r\n */\r\nfunction processPitchBend(events, options = {}) {\r\n\r\n\t// Set default pitch bend range to 12\r\n\tconst defaultPitchBendRange = options.useFullPitchBendRange ? FULL_PITCH_BEND_RANGE : DEFAULT_PITCH_BEND_RANGE;\r\n\r\n\tconst eventsWithPitchBend = [];\r\n\tconst notesOn = {};\r\n\tconst channelCC = {};\r\n\tconst pitchBendValue = {};\r\n\tconst pitchBendRange = {};\r\n\tconst pitchBendRangeCCTypes = [CC_RPN_COARSE, CC_RPN_FINE, CC_DATA_ENTRY_COARSE, CC_DATA_ENTRY_FINE];\r\n\r\n\tlet isSettingPitchBendRangeCoarse = {};\r\n\tlet isSettingPitchBendRangeFine = {};\r\n\r\n\tfor (const event of events) {\r\n\t\t// Control change event to reset all controllers\r\n\t\tif (event.type === 'controller' && event.controllerType === 0x79) {\r\n\t\t\tpitchBendRange[event.channel] = defaultPitchBendRange;\r\n\t\t}\r\n\r\n\t\t// Control change event for pitch bend range\r\n\t\tif (event.type === 'controller' && pitchBendRangeCCTypes.includes(event.controllerType)) {\r\n\t\t\tif (!channelCC[event.channel]) {\r\n\t\t\t\tchannelCC[event.channel] = {};\r\n\t\t\t}\r\n\t\t\tchannelCC[event.channel][event.controllerType] = event.value;\r\n\r\n\t\t\tlet isPitchBendRangeMessageComplete = false;\r\n\t\t\tif (event.controllerType === CC_RPN_COARSE && event.value === 0x00) {\r\n\t\t\t\tisSettingPitchBendRangeCoarse[event.channel] = true;\r\n\t\t\t} else if (event.controllerType === CC_RPN_FINE && event.value === 0x00) {\r\n\t\t\t\tisSettingPitchBendRangeFine[event.channel] = true;\r\n\t\t\t} else if (event.controllerType === CC_DATA_ENTRY_COARSE && isSettingPitchBendRangeCoarse[event.channel]) {\r\n\t\t\t\tisSettingPitchBendRangeCoarse[event.channel] = false;\r\n\t\t\t\tisPitchBendRangeMessageComplete = true;\r\n\t\t\t} else if (event.controllerType === CC_DATA_ENTRY_FINE && isSettingPitchBendRangeFine[event.channel]) {\r\n\t\t\t\tisSettingPitchBendRangeFine[event.channel] = false;\r\n\t\t\t\tisPitchBendRangeMessageComplete = true;\r\n\t\t\t}\r\n\r\n\t\t\t// We're done receiving our pitch bend range message\r\n\t\t\tif (isPitchBendRangeMessageComplete &&\r\n\t\t\t\t(channelCC[event.channel][CC_RPN_COARSE] || 0x00) === 0x00 &&\r\n\t\t\t\t(channelCC[event.channel][CC_RPN_FINE] || 0x00) === 0x00) {\r\n\t\t\t\tpitchBendRange[event.channel] = (channelCC[event.channel][CC_DATA_ENTRY_COARSE] || defaultPitchBendRange) + (channelCC[event.channel][CC_DATA_ENTRY_FINE] || 0) / 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Note events\r\n\t\tif (event.type === 'noteOn' || event.type === 'noteOff') {\r\n\t\t\t// Apply pitch bend note offset to the note event\r\n\t\t\tconst channelPitchBendValue = pitchBendValue[event.channel] || 0;\r\n\t\t\tconst channelPitchBendRange = pitchBendRange[event.channel] || defaultPitchBendRange;\r\n\t\t\tconst noteOffset = Math.round(channelPitchBendValue * channelPitchBendRange);\r\n\t\t\tconst noteNumber = event.noteNumber + noteOffset;\r\n\t\t\teventsWithPitchBend.push({ ...event, noteNumber });\r\n\r\n\t\t\t// Keep noteOn events to split them if a pitch bend variation occurs\r\n\t\t\tconst noteKey = `${event.trackIndex}-${event.noteNumber}`;\r\n\t\t\tif (!notesOn[event.channel]) {\r\n\t\t\t\tnotesOn[event.channel] = new Map();\r\n\t\t\t}\r\n\t\t\tif (event.type === 'noteOn') {\r\n\t\t\t\tnotesOn[event.channel].set(noteKey, event);\r\n\t\t\t} else {\r\n\t\t\t\tnotesOn[event.channel].delete(noteKey);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Pitch bend events\r\n\t\telse if (event.type === 'pitchBend') {\r\n\t\t\tconst currentPitchBendValue = (pitchBendValue[event.channel] || 0) * (pitchBendRange[event.channel] || defaultPitchBendRange);\r\n\r\n\t\t\t// Changing pitch bend value\r\n\t\t\tif (event.type === 'pitchBend') {\r\n\t\t\t\tpitchBendValue[event.channel] = event.value / 0x2000;\r\n\t\t\t}\r\n\r\n\t\t\tconst newPitchBendValue = (pitchBendValue[event.channel] || 0) * (pitchBendRange[event.channel] || defaultPitchBendRange);\r\n\r\n\t\t\t// Get current and new note (semitone) offsets\r\n\t\t\tconst currentNoteOffset = Math.round(currentPitchBendValue);\r\n\t\t\tconst newNoteOffset = Math.round(newPitchBendValue);\r\n\r\n\t\t\t// The semitone offset has changed\r\n\t\t\tif (currentNoteOffset !== newNoteOffset && notesOn[event.channel]) {\r\n\t\t\t\t// Split note to create the slide\r\n\t\t\t\tfor (const [noteKey, noteOn] of notesOn[event.channel]) {\r\n\t\t\t\t\t// Insert noteOff event from current pitch bend value\r\n\t\t\t\t\teventsWithPitchBend.push({\r\n\t\t\t\t\t\tdeltaTime: event.deltaTime,\r\n\t\t\t\t\t\ttick: event.tick,\r\n\t\t\t\t\t\ttime: event.time,\r\n\t\t\t\t\t\tchannel: noteOn.channel,\r\n\t\t\t\t\t\tnoteNumber: noteOn.noteNumber + currentNoteOffset,\r\n\t\t\t\t\t\ttrackIndex: noteOn.trackIndex,\r\n\t\t\t\t\t\ttype: 'noteOff',\r\n\t\t\t\t\t\tvelocity: noteOn.velocity,\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// Insert new noteOn event with the new pitch bend value\r\n\t\t\t\t\teventsWithPitchBend.push({\r\n\t\t\t\t\t\tdeltaTime: event.deltaTime,\r\n\t\t\t\t\t\ttick: event.tick,\r\n\t\t\t\t\t\ttime: event.time,\r\n\t\t\t\t\t\tchannel: noteOn.channel,\r\n\t\t\t\t\t\tnoteNumber: noteOn.noteNumber + newNoteOffset,\r\n\t\t\t\t\t\ttrackIndex: noteOn.trackIndex,\r\n\t\t\t\t\t\ttype: 'noteOn',\r\n\t\t\t\t\t\tvelocity: noteOn.velocity,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Other events\r\n\t\telse {\r\n\t\t\teventsWithPitchBend.push({ ...event });\r\n\t\t}\r\n\t}\r\n\r\n\treturn eventsWithPitchBend;\r\n}\r\n\r\n/**\r\n * Calculate the duration property of the noteOn events inside the provided events array.\r\n * @param {array} events\r\n * @returns {array} same as provided\r\n */\r\nfunction calculateNoteOnDurations(events) {\r\n\tconst notesOn = new Map();\r\n\r\n\tfor (const event of events) {\r\n\t\tif (event.type === 'noteOn' || event.type === 'noteOff') {\r\n\t\t\tconst noteKey = `${event.trackIndex}-${event.channel}-${event.noteNumber}`;\r\n\t\t\tconst noteOnStack = notesOn.get(noteKey) || [];\r\n\r\n\t\t\tif (event.type === 'noteOn') {\r\n\t\t\t\tnoteOnStack.push(event);\r\n\t\t\t\tnotesOn.set(noteKey, noteOnStack);\r\n\t\t\t} else if (noteOnStack.length > 0) {\r\n\t\t\t\tconst noteOnEvent = noteOnStack.pop();\r\n\t\t\t\tnoteOnEvent.duration = event.time - noteOnEvent.time;\r\n\t\t\t\tif (noteOnStack.length === 0) {\r\n\t\t\t\t\tnotesOn.delete(noteKey);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn events;\r\n}\r\n\r\n/**\r\n * Convert MIDI file into a Musician song object.\r\n * @param {ArrayBuffer} midiArray\r\n * @param {string} fileName\r\n * @param {object} options\r\n * @returns {object}\r\n */\r\nfunction convertMidi(midiArray, fileName, options) {\r\n\r\n\t// Parse binary MIDI file\r\n\tif (midiArray instanceof ArrayBuffer) {\r\n\t\tmidiArray = new Uint8Array(midiArray);\r\n\t}\r\n\tconst midi = parseMidi(midiArray);\r\n\tconst rawEvents = extractEvents(midi);\r\n\r\n\t// Process sustain pedal\r\n\tconst eventsWithSustain = processSustain(rawEvents);\r\n\r\n\t// Process pitch bend\r\n\tconst eventsWithPitchBend = processPitchBend(eventsWithSustain, options);\r\n\r\n\t// Calculate noteOn durations\r\n\tconst events = calculateNoteOnDurations(eventsWithPitchBend);\r\n\r\n\t// Create song object\r\n\tlet title;\r\n\tconst duration = events[events.length - 1].time; // Get the last event time as song duration\r\n\tconst tracksMap = new Map();\r\n\tconst trackNames = {}\r\n\tconst instrumentByTrack = new Map();\r\n\tconst instrumentByChannel = new Map();\r\n\tconst titleParts = [];\r\n\r\n\t/**\r\n\t * Create or return existing track matching index and channel\r\n\t * @param {integer} trackIndex MIDI track index\r\n\t * @param {integer} channel MIDI channel\r\n\t * @returns {object}\r\n\t */\r\n\tfunction getTrack(trackIndex = 0, channel = 0) {\r\n\t\tconst trackInstrument = instrumentByTrack.get(`${channel}-${trackIndex}`);\r\n\t\tconst channelInstrument = instrumentByChannel.get(channel);\r\n\t\tconst instrument = (trackInstrument !== undefined) ? trackInstrument : (channelInstrument || 0);\r\n\t\tconst trackKey = `${trackIndex}-${channel}-${instrument}`;\r\n\t\t// For MIDI format 2 files, channels 10 and 11 can be used for percussions\r\n\t\tconst isPercussion = (midi?.header?.format === 2) ? (channel === 9 || channel === 10) : (channel === 9);\r\n\r\n\t\t// Create new track\r\n\t\tif (!tracksMap.has(trackKey)) {\r\n\t\t\tconst track = {\r\n\t\t\t\tname: '',\r\n\t\t\t\ttrackIndex,\r\n\t\t\t\tchannel,\r\n\t\t\t\tinstrument,\r\n\t\t\t\tisPercussion,\r\n\t\t\t\tnotes: []\r\n\t\t\t};\r\n\t\t\ttracksMap.set(trackKey, track);\r\n\t\t\treturn track;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\treturn tracksMap.get(trackKey);\r\n\t\t}\r\n\t}\r\n\r\n\t// Fill song data\r\n\tlet metaChannel = null;\r\n\tfor (const event of events) {\r\n\t\tswitch (event.type) {\r\n\t\t\tcase 'noteOn':\r\n\t\t\t\tconst track = getTrack(event.trackIndex, event.channel);\r\n\t\t\t\ttrack.notes.push({\r\n\t\t\t\t\ttime: event.time,\r\n\t\t\t\t\tduration: event.duration,\r\n\t\t\t\t\tkey: event.noteNumber,\r\n\t\t\t\t\tvelocity: event.velocity,\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'programChange':\r\n\t\t\t\tinstrumentByTrack.set(`${event.channel}-${event.trackIndex}`, event.programNumber);\r\n\t\t\t\tinstrumentByChannel.set(event.channel, event.programNumber);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'channelPrefix':\r\n\t\t\t\tmetaChannel = event.channel;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'trackName':\r\n\t\t\t\t// Type 0 MIDI files that have a single track may have several trackName events,\r\n\t\t\t\t// one per channel, defined by a previous channelPrefix event\r\n\t\t\t\tif (trackNames[event.trackIndex] === undefined) {\r\n\t\t\t\t\ttrackNames[event.trackIndex] = {};\r\n\t\t\t\t}\r\n\t\t\t\ttrackNames[event.trackIndex][metaChannel || 0] = event.text.trim();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'text':\r\n\t\t\t\t// Extract title from Karaoke metadata\r\n\t\t\t\tconst matches = event.text.match(/^@T(.*)$/);\r\n\t\t\t\tif (matches) {\r\n\t\t\t\t\ttitleParts.push(matches[1]);\r\n\t\t\t\t}\r\n\r\n\t\t\tdefault:\r\n\t\t}\r\n\t}\r\n\r\n\t// Song title\r\n\ttitle = (titleParts.length > 0)\r\n\t\t? titleParts.join(' - ').trim()\r\n\t\t: filenameToTitle(fileName); // Defaults to file name\r\n\r\n\t// Create tracks list\r\n\tconst tracks = Array.from(tracksMap, ([trackKey, track]) => track).filter(track => (track.notes.length > 0)); // Only keep tracks with notes\r\n\ttracks.sort((a, b) => {\r\n\t\tconst weightA = a.trackIndex * 1000000 + a.channel * 1000 + a.instrument;\r\n\t\tconst weightB = b.trackIndex * 1000000 + b.channel * 1000 + b.instrument;\r\n\t\tif (weightA < weightB) {\r\n\t\t\treturn -1;\r\n\t\t} else {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t})\r\n\r\n\t// Track names\r\n\tfor (const track of tracks) {\r\n\t\ttrack.name = trackNames[track.trackIndex] && (trackNames[track.trackIndex][track.channel] || trackNames[track.trackIndex][0]) || '';\r\n\t}\r\n\r\n\t// Return final object\r\n\treturn { title, duration, tracks };\r\n}\r\n\r\n/**\r\n * Convert MIDI file into a Musician song file.\r\n * @param {ArrayBuffer} midiArray\r\n * @param {string} fileName\r\n * @param {object} options\r\n * @returns {string}\r\n */\r\nexport function packSong(midiArray, fileName, options) {\r\n\t// Get formatted song\r\n\tconst song = convertMidi(midiArray, fileName, options);\r\n\r\n\tlet packedSong = '';\r\n\r\n\t// Header (4)\r\n\tpackedSong += FILE_HEADER;\r\n\r\n\t// Song title (2) + (title length in bytes)\r\n\tpackedSong += packString(song.title);\r\n\r\n\t// Song mode (1)\r\n\tpackedSong += packNumber(MODE_DURATION, 1);\r\n\r\n\t// Duration (3)\r\n\tpackedSong += packNumber(Math.ceil(song.duration), 3);\r\n\r\n\t// Grab track and notes\r\n\tconst tracks = [];\r\n\tfor (const rawTrack of song.tracks) {\r\n\t\tconst track = {};\r\n\r\n\t\t// Track instrument\r\n\t\tif (rawTrack.isPercussion) {\r\n\t\t\t// Shift instrument number by 128 for percussions\r\n\t\t\ttrack.instrument = rawTrack.instrument + 128;\r\n\t\t} else {\r\n\t\t\ttrack.instrument = rawTrack.instrument;\r\n\t\t}\r\n\t\ttrack.isPercussion = rawTrack.isPercussion;\r\n\r\n\t\t// Track channel\r\n\t\ttrack.channel = rawTrack.channel + 1;\r\n\r\n\t\t// Track name\r\n\t\ttrack.name = rawTrack.name || \"\";\r\n\r\n\t\t// Track notes\r\n\t\tlet offset = 0;\r\n\t\tconst notes = [];\r\n\t\tfor (const rawNote of rawTrack.notes) {\r\n\t\t\tconst noteKey = rawNote.key;\r\n\r\n\t\t\t// Ignore notes that are not within the MIDI range\r\n\t\t\t// Also ignore notes with key = 127 to avoid notes type 1 being taken for a separator (0xFF).\r\n\t\t\tif (noteKey >= 0 && noteKey < 127) {\r\n\t\t\t\t// Get time and duration\r\n\t\t\t\tlet noteTime = rawNote.time - offset;\r\n\t\t\t\tconst noteDuration = Math.min(rawNote.duration, MAX_LONG_NOTE_DURATION);\r\n\r\n\t\t\t\t// Insert note spacers if needed\r\n\t\t\t\tlet noteSpacer = '';\r\n\t\t\t\twhile (noteTime > MAX_NOTE_TIME) {\r\n\t\t\t\t\tnoteSpacer += packNumber(0xFF, 1); // 0xFF char\r\n\t\t\t\t\tnoteTime -= MAX_NOTE_TIME;\r\n\t\t\t\t\toffset += MAX_NOTE_TIME;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Calculate rounded time based on NOTE_TIME_FPS\r\n\t\t\t\tconst timeFrames = Math.round(noteTime * NOTE_TIME_FPS);\r\n\t\t\t\tconst roundedTime = timeFrames / NOTE_TIME_FPS;\r\n\r\n\t\t\t\t// Calculated rounded duration based on NOTE_DURATION_FPS\r\n\t\t\t\tconst adjustedDuration = Math.max(0, noteDuration + noteTime - roundedTime);\r\n\t\t\t\tconst durationFrames = Math.floor(adjustedDuration * NOTE_DURATION_FPS);\r\n\r\n\t\t\t\t// Determine if it's a long note or a short one\r\n\t\t\t\tconst isLongNote = durationFrames > 0xFF && noteKey < 127; // Avoid long notes of the max 127 key to avoid confusion with a spacer\r\n\t\t\t\tconst longNoteFlag = isLongNote ? 0x80 : 0x00;\r\n\r\n\t\t\t\t// Insert packed note: key (1), time (2), duration (1 or 2)\r\n\t\t\t\tnotes.push(\r\n\t\t\t\t\tnoteSpacer +\r\n\t\t\t\t\tpackNumber(noteKey | longNoteFlag, 1) +\r\n\t\t\t\t\tpackNumber(timeFrames, 2) +\r\n\t\t\t\t\tpackNumber(durationFrames, isLongNote ? 2 : 1)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\ttrack.notes = notes;\r\n\r\n\t\ttracks.push(track);\r\n\t}\r\n\r\n\t// Number of tracks (1)\r\n\tif (tracks.length > 255) {\r\n\t\tthrow \"A song cannot have more than 255 tracks.\";\r\n\t}\r\n\tpackedSong += packNumber(tracks.length, 1);\r\n\r\n\t// Track data: instrument (1), channel (1), number of notes (2),\r\n\tfor (const track of tracks) {\r\n\t\tif (track.notes.length > 65535) {\r\n\t\t\tthrow \"A track cannot have more than 65535 notes.\";\r\n\t\t}\r\n\r\n\t\tpackedSong += packNumber(track.instrument, 1);\r\n\t\tpackedSong += packNumber(track.channel, 1);\r\n\t\tpackedSong += packNumber(track.notes.length, 2);\r\n\t}\r\n\r\n\t// Note data\r\n\tfor (const track of tracks) {\r\n\t\tpackedSong += track.notes.join(''); // Notes are already packed\r\n\t};\r\n\r\n\t// Track names (2) + (title length in bytes)\r\n\tfor (const track of tracks) {\r\n\t\tpackedSong += packString(track.name);\r\n\t}\r\n\r\n\treturn packedSong;\r\n}"],"names":["root","factory","exports","module","define","amd","this","parseMidi","parseTrack","data","lastEventTypeByte","p","Parser","events","eof","event","readEvent","push","deltaTime","readVarInt","eventTypeByte","readUInt8","type","length","readBytes","meta","metatypeByte","number","readUInt16","text","readString","channel","port","microsecondsPerBeat","readUInt24","hourByte","frameRate","hour","min","sec","frame","subFrame","numerator","denominator","metronome","thirtyseconds","key","readInt8","scale","param1","running","eventType","noteNumber","velocity","byte9","amount","controllerType","value","programNumber","buffer","bufferLen","pos","prototype","result","u","readInt16","readInt24","readUInt32","len","bytes","slice","multibyteString","TextDecoder","decode","singlebyteString","String","fromCharCode","apply","b","readChunk","id","headerChunk","header","format","numTracks","timeDivision","framesPerSecond","ticksPerFrame","ticksPerBeat","parseHeader","tracks","i","trackChunk","track","writeTrack","w","opts","t","Writer","writeEvent","useByte9ForNoteOff","writeChunk","writeVarInt","writeUInt8","writeUInt16","writeString","writeUInt24","Math","floor","log","LN2","writeInt8","writeBytes","value14","lsb14","msb14","v","b0","b1","writeInt16","b2","writeInt24","writeUInt32","b3","writeInt32","arr","concat","Array","call","str","codePointAt","reverse","_typeof","h","writeHeader","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","o","Object","defineProperty","enumerable","get","obj","prop","hasOwnProperty","r","Symbol","toStringTag","require","CONVERTER_VERSION","FILE_HEADER","NOTE_DURATION_FPS","MAX_LONG_NOTE_DURATION","NOTE_TIME_FPS","MAX_NOTE_TIME","MODE_DURATION","DEFAULT_PITCH_BEND_RANGE","FULL_PITCH_BEND_RANGE","CC_RPN_FINE","CC_RPN_COARSE","CC_DATA_ENTRY_COARSE","CC_DATA_ENTRY_FINE","packNumber","num","pow","packed","packString","utf8Str","unescape","encodeURIComponent","replace","utf8Encode","packSong","midiArray","fileName","options","song","ArrayBuffer","Uint8Array","title","midi","eventsWithSustain","_step2","notesDown","Map","skippedNotesOff","sustainedChannels","_iterator2","_createForOfIteratorHelper","s","n","done","noteKey","trackIndex","set","previousNoteOffEvent","tick","time","_objectSpread","isSustained","_step4","_iterator4","_step4$value","_slicedToArray","noteOff","has","err","e","f","_step3","_iterator3","_step3$value","processSustain","_step","_iterator","parseInt","sort","a","tickDuration","currentTick","currentTime","bpm","_i","_events","relativeTick","extractEvents","eventsWithPitchBend","_step5","defaultPitchBendRange","arguments","useFullPitchBendRange","notesOn","channelCC","pitchBendValue","pitchBendRange","pitchBendRangeCCTypes","isSettingPitchBendRangeCoarse","isSettingPitchBendRangeFine","_iterator5","includes","isPitchBendRangeMessageComplete","channelPitchBendValue","channelPitchBendRange","noteOffset","round","currentPitchBendValue","newPitchBendValue","currentNoteOffset","newNoteOffset","_step6","_iterator6","_step6$value","noteOn","processPitchBend","_step7","_iterator7","noteOnStack","noteOnEvent","pop","duration","calculateNoteOnDurations","tracksMap","trackNames","instrumentByTrack","instrumentByChannel","titleParts","getTrack","_midi$header","trackInstrument","channelInstrument","instrument","trackKey","isPercussion","name","notes","_step8","metaChannel","_iterator8","trim","matches","match","join","$1","toUpperCase","filenameToTitle","from","_ref","_ref2","filter","_step9","_iterator9","convertMidi","packedSong","ceil","_step10","_iterator10","rawTrack","_step11","offset","_iterator11","rawNote","noteTime","noteDuration","noteSpacer","timeFrames","roundedTime","adjustedDuration","max","durationFrames","isLongNote","longNoteFlag","_i2","_tracks","_i3","_tracks2","_i4","_tracks3"],"sourceRoot":""}