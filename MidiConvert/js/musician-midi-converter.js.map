{"version":3,"sources":["webpack://MusicianMidiConverter/webpack/universalModuleDefinition","webpack://MusicianMidiConverter/./node_modules/midi-file/index.js","webpack://MusicianMidiConverter/./node_modules/midi-file/lib/midi-parser.js","webpack://MusicianMidiConverter/./node_modules/midi-file/lib/midi-writer.js","webpack://MusicianMidiConverter/webpack/bootstrap","webpack://MusicianMidiConverter/webpack/runtime/define property getters","webpack://MusicianMidiConverter/webpack/runtime/hasOwnProperty shorthand","webpack://MusicianMidiConverter/webpack/runtime/make namespace object","webpack://MusicianMidiConverter/./src/musician-midi-converter.js"],"names":["root","factory","exports","module","define","amd","this","parseMidi","parseTrack","data","lastEventTypeByte","p","Parser","events","eof","event","readEvent","push","deltaTime","readVarInt","eventTypeByte","readUInt8","type","length","readBytes","meta","metatypeByte","number","readUInt16","text","readString","channel","port","microsecondsPerBeat","readUInt24","hourByte","frameRate","0","hour","min","sec","frame","subFrame","numerator","denominator","metronome","thirtyseconds","key","readInt8","scale","param1","running","eventType","noteNumber","velocity","byte9","amount","controllerType","value","programNumber","buffer","bufferLen","pos","prototype","result","u","readInt16","readInt24","readUInt32","len","bytes","slice","String","fromCharCode","apply","b","readChunk","id","headerChunk","header","format","numTracks","timeDivision","framesPerSecond","ticksPerFrame","ticksPerBeat","parseHeader","tracks","i","trackChunk","track","writeTrack","w","opts","t","Writer","writeEvent","useByte9ForNoteOff","writeChunk","writeVarInt","writeUInt8","writeUInt16","writeString","writeUInt24","24","25","29","30","Math","floor","log","LN2","writeInt8","writeBytes","value14","lsb14","msb14","v","b0","b1","writeInt16","b2","writeInt24","writeUInt32","b3","writeInt32","arr","concat","Array","call","str","codePointAt","reverse","h","writeHeader","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","o","Object","defineProperty","enumerable","get","obj","prop","hasOwnProperty","r","Symbol","toStringTag","require","CONVERTER_VERSION","MAX_NOTE_TIME","CC_RPN_FINE","CC_RPN_COARSE","packNumber","num","pow","packed","packString","utf8Str","unescape","encodeURIComponent","replace","utf8Encode","packSong","midiArray","fileName","options","song","ArrayBuffer","Uint8Array","title","midi","notesOn","Map","noteKey","trackIndex","noteOnStack","set","noteOnEvent","pop","duration","time","calculateNoteOnDurations","defaultPitchBendRange","fromMuseScore","eventsWithPitchBend","channelCC","pitchBendValue","pitchBendRange","pitchBendRangeCCTypes","isSettingPitchBendRangeCoarse","isSettingPitchBendRangeFine","newPitchBandRangeValue","includes","isPitchBendRangeMessageComplete","CC_DATA_ENTRY_FINE","channelPitchBendValue","channelPitchBendRange","noteOffset","round","currentPitchBendValue","newPitchBendValue","currentNoteOffset","newNoteOffset","noteOn","tick","processPitchBend","eventsWithSustain","notesDown","skippedNotesOff","sustainedChannels","previousNoteOffEvent","isSustained","noteOff","has","processSustain","parseInt","sort","a","tickDuration","currentTick","currentTime","bpm","relativeTick","extractEvents","tracksMap","trackNames","instrumentByTrack","instrumentByChannel","titleParts","getTrack","trackInstrument","channelInstrument","instrument","trackKey","isPercussion","name","notes","trackName","matches","match","join","$1","toUpperCase","filenameToTitle","from","filter","convertMidi","packedSong","ceil","rawTrack","offset","rawNote","noteTime","noteDuration","noteSpacer","timeFrames","roundedTime","adjustedDuration","max","durationFrames","isLongNote","longNoteFlag"],"mappings":"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","file":"musician-midi-converter.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MusicianMidiConverter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MusicianMidiConverter\"] = factory();\n\telse\n\t\troot[\"MusicianMidiConverter\"] = factory();\n})(this, function() {\nreturn ","exports.parseMidi = require('./lib/midi-parser')\nexports.writeMidi = require('./lib/midi-writer')\n","// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\n\nfunction parseMidi(data) {\n  var p = new Parser(data)\n\n  var headerChunk = p.readChunk()\n  if (headerChunk.id != 'MThd')\n    throw \"Bad MIDI file.  Expected 'MHdr', got: '\" + headerChunk.id + \"'\"\n  var header = parseHeader(headerChunk.data)\n\n  var tracks = []\n  for (var i=0; !p.eof() && i < header.numTracks; i++) {\n    var trackChunk = p.readChunk()\n    if (trackChunk.id != 'MTrk')\n      throw \"Bad MIDI file.  Expected 'MTrk', got: '\" + trackChunk.id + \"'\"\n    var track = parseTrack(trackChunk.data)\n    tracks.push(track)\n  }\n\n  return {\n    header: header,\n    tracks: tracks\n  }\n}\n\n\nfunction parseHeader(data) {\n  var p = new Parser(data)\n\n  var format = p.readUInt16()\n  var numTracks = p.readUInt16()\n\n  var result = {\n    format: format,\n    numTracks: numTracks\n  }\n\n  var timeDivision = p.readUInt16()\n  if (timeDivision & 0x8000) {\n    result.framesPerSecond = 0x100 - (timeDivision >> 8)\n    result.ticksPerFrame = timeDivision & 0xFF\n  } else {\n    result.ticksPerBeat = timeDivision\n  }\n\n  return result\n}\n\nfunction parseTrack(data) {\n  var p = new Parser(data)\n\n  var events = []\n  while (!p.eof()) {\n    var event = readEvent()\n    events.push(event)\n  }\n\n  return events\n\n  var lastEventTypeByte = null\n\n  function readEvent() {\n    var event = {}\n    event.deltaTime = p.readVarInt()\n\n    var eventTypeByte = p.readUInt8()\n\n    if ((eventTypeByte & 0xf0) === 0xf0) {\n      // system / meta event\n      if (eventTypeByte === 0xff) {\n        // meta event\n        event.meta = true\n        var metatypeByte = p.readUInt8()\n        var length = p.readVarInt()\n        switch (metatypeByte) {\n          case 0x00:\n            event.type = 'sequenceNumber'\n            if (length !== 2) throw \"Expected length for sequenceNumber event is 2, got \" + length\n            event.number = p.readUInt16()\n            return event\n          case 0x01:\n            event.type = 'text'\n            event.text = p.readString(length)\n            return event\n          case 0x02:\n            event.type = 'copyrightNotice'\n            event.text = p.readString(length)\n            return event\n          case 0x03:\n            event.type = 'trackName'\n            event.text = p.readString(length)\n            return event\n          case 0x04:\n            event.type = 'instrumentName'\n            event.text = p.readString(length)\n            return event\n          case 0x05:\n            event.type = 'lyrics'\n            event.text = p.readString(length)\n            return event\n          case 0x06:\n            event.type = 'marker'\n            event.text = p.readString(length)\n            return event\n          case 0x07:\n            event.type = 'cuePoint'\n            event.text = p.readString(length)\n            return event\n          case 0x20:\n            event.type = 'channelPrefix'\n            if (length != 1) throw \"Expected length for channelPrefix event is 1, got \" + length\n            event.channel = p.readUInt8()\n            return event\n          case 0x21:\n            event.type = 'portPrefix'\n            if (length != 1) throw \"Expected length for portPrefix event is 1, got \" + length\n            event.port = p.readUInt8()\n            return event\n          case 0x2f:\n            event.type = 'endOfTrack'\n            if (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length\n            return event\n          case 0x51:\n            event.type = 'setTempo';\n            if (length != 3) throw \"Expected length for setTempo event is 3, got \" + length\n            event.microsecondsPerBeat = p.readUInt24()\n            return event\n          case 0x54:\n            event.type = 'smpteOffset';\n            if (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length\n            var hourByte = p.readUInt8()\n            var FRAME_RATES = { 0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30 }\n            event.frameRate = FRAME_RATES[hourByte & 0x60]\n            event.hour = hourByte & 0x1f\n            event.min = p.readUInt8()\n            event.sec = p.readUInt8()\n            event.frame = p.readUInt8()\n            event.subFrame = p.readUInt8()\n            return event\n          case 0x58:\n            event.type = 'timeSignature'\n            if (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length\n            event.numerator = p.readUInt8()\n            event.denominator = (1 << p.readUInt8())\n            event.metronome = p.readUInt8()\n            event.thirtyseconds = p.readUInt8()\n            return event\n          case 0x59:\n            event.type = 'keySignature'\n            if (length != 2) throw \"Expected length for keySignature event is 2, got \" + length\n            event.key = p.readInt8()\n            event.scale = p.readUInt8()\n            return event\n          case 0x7f:\n            event.type = 'sequencerSpecific'\n            event.data = p.readBytes(length)\n            return event\n          default:\n            event.type = 'unknownMeta'\n            event.data = p.readBytes(length)\n            event.metatypeByte = metatypeByte\n            return event\n        }\n      } else if (eventTypeByte == 0xf0) {\n        event.type = 'sysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else if (eventTypeByte == 0xf7) {\n        event.type = 'endSysEx'\n        var length = p.readVarInt()\n        event.data = p.readBytes(length)\n        return event\n      } else {\n        throw \"Unrecognised MIDI event type byte: \" + eventTypeByte\n      }\n    } else {\n      // channel event\n      var param1\n      if ((eventTypeByte & 0x80) === 0) {\n        // running status - reuse lastEventTypeByte as the event type.\n        // eventTypeByte is actually the first parameter\n        if (lastEventTypeByte === null)\n          throw \"Running status byte encountered before status byte\"\n        param1 = eventTypeByte\n        eventTypeByte = lastEventTypeByte\n        event.running = true\n      } else {\n        param1 = p.readUInt8()\n        lastEventTypeByte = eventTypeByte\n      }\n      var eventType = eventTypeByte >> 4\n      event.channel = eventTypeByte & 0x0f\n      switch (eventType) {\n        case 0x08:\n          event.type = 'noteOff'\n          event.noteNumber = param1\n          event.velocity = p.readUInt8()\n          return event\n        case 0x09:\n          var velocity = p.readUInt8()\n          event.type = velocity === 0 ? 'noteOff' : 'noteOn'\n          event.noteNumber = param1\n          event.velocity = velocity\n          if (velocity === 0) event.byte9 = true\n          return event\n        case 0x0a:\n          event.type = 'noteAftertouch'\n          event.noteNumber = param1\n          event.amount = p.readUInt8()\n          return event\n        case 0x0b:\n          event.type = 'controller'\n          event.controllerType = param1\n          event.value = p.readUInt8()\n          return event\n        case 0x0c:\n          event.type = 'programChange'\n          event.programNumber = param1\n          return event\n        case 0x0d:\n          event.type = 'channelAftertouch'\n          event.amount = param1\n          return event\n        case 0x0e:\n          event.type = 'pitchBend'\n          event.value = (param1 + (p.readUInt8() << 7)) - 0x2000\n          return event\n        default:\n          throw \"Unrecognised MIDI event type: \" + eventType\n      }\n    }\n  }\n}\n\nfunction Parser(data) {\n  this.buffer = data\n  this.bufferLen = this.buffer.length\n  this.pos = 0\n}\n\nParser.prototype.eof = function() {\n  return this.pos >= this.bufferLen\n}\n\nParser.prototype.readUInt8 = function() {\n  var result = this.buffer[this.pos]\n  this.pos += 1\n  return result\n}\n\nParser.prototype.readInt8 = function() {\n  var u = this.readUInt8()\n  if (u & 0x80)\n    return u - 0x100\n  else\n    return u\n}\n\nParser.prototype.readUInt16 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8()\n\n    return (b0 << 8) + b1\n}\n\nParser.prototype.readInt16 = function() {\n  var u = this.readUInt16()\n  if (u & 0x8000)\n    return u - 0x10000\n  else\n    return u\n}\n\nParser.prototype.readUInt24 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8()\n\n    return (b0 << 16) + (b1 << 8) + b2\n}\n\nParser.prototype.readInt24 = function() {\n  var u = this.readUInt24()\n  if (u & 0x800000)\n    return u - 0x1000000\n  else\n    return u\n}\n\nParser.prototype.readUInt32 = function() {\n  var b0 = this.readUInt8(),\n      b1 = this.readUInt8(),\n      b2 = this.readUInt8(),\n      b3 = this.readUInt8()\n\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3\n}\n\nParser.prototype.readBytes = function(len) {\n  var bytes = this.buffer.slice(this.pos, this.pos + len)\n  this.pos += len\n  return bytes\n}\n\nParser.prototype.readString = function(len) {\n  var bytes = this.readBytes(len)\n  return String.fromCharCode.apply(null, bytes)\n}\n\nParser.prototype.readVarInt = function() {\n  var result = 0\n  while (!this.eof()) {\n    var b = this.readUInt8()\n    if (b & 0x80) {\n      result += (b & 0x7f)\n      result <<= 7\n    } else {\n      // b is last byte\n      return result + b\n    }\n  }\n  // premature eof\n  return result\n}\n\nParser.prototype.readChunk = function() {\n  var id = this.readString(4)\n  var length = this.readUInt32()\n  var data = this.readBytes(length)\n  return {\n    id: id,\n    length: length,\n    data: data\n  }\n}\n\nmodule.exports = parseMidi\n","// data should be the same type of format returned by parseMidi\n// for maximum compatibililty, returns an array of byte values, suitable for conversion to Buffer, Uint8Array, etc.\n\n// opts:\n// - running              reuse previous eventTypeByte when possible, to compress file\n// - useByte9ForNoteOff   use 0x09 for noteOff when velocity is zero\n\nfunction writeMidi(data, opts) {\n  if (typeof data !== 'object')\n    throw 'Invalid MIDI data'\n\n  opts = opts || {}\n\n  var header = data.header || {}\n  var tracks = data.tracks || []\n  var i, len = tracks.length\n\n  var w = new Writer()\n  writeHeader(w, header, len)\n\n  for (i=0; i < len; i++) {\n    writeTrack(w, tracks[i], opts)\n  }\n\n  return w.buffer\n}\n\nfunction writeHeader(w, header, numTracks) {\n  var format = header.format == null ? 1 : header.format\n\n  var timeDivision = 128\n  if (header.timeDivision) {\n    timeDivision = header.timeDivision\n  } else if (header.ticksPerFrame && header.framesPerSecond) {\n    timeDivision = (-(header.framesPerSecond & 0xFF) << 8) | (header.ticksPerFrame & 0xFF)\n  } else if (header.ticksPerBeat) {\n    timeDivision = header.ticksPerBeat & 0x7FFF\n  }\n\n  var h = new Writer()\n  h.writeUInt16(format)\n  h.writeUInt16(numTracks)\n  h.writeUInt16(timeDivision)\n\n  w.writeChunk('MThd', h.buffer)\n}\n\nfunction writeTrack(w, track, opts) {\n  var t = new Writer()\n  var i, len = track.length\n  var eventTypeByte = null\n  for (i=0; i < len; i++) {\n    // Reuse last eventTypeByte when opts.running is set, or event.running is explicitly set on it.\n    // parseMidi will set event.running for each event, so that we can get an exact copy by default.\n    // Explicitly set opts.running to false, to override event.running and never reuse last eventTypeByte.\n    if (opts.running === false || !opts.running && !track[i].running) eventTypeByte = null\n\n    eventTypeByte = writeEvent(t, track[i], eventTypeByte, opts.useByte9ForNoteOff)\n  }\n  w.writeChunk('MTrk', t.buffer)\n}\n\nfunction writeEvent(w, event, lastEventTypeByte, useByte9ForNoteOff) {\n  var type = event.type\n  var deltaTime = event.deltaTime\n  var text = event.text || ''\n  var data = event.data || []\n  var eventTypeByte = null\n  w.writeVarInt(deltaTime)\n\n  switch (type) {\n    // meta events\n    case 'sequenceNumber':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x00)\n      w.writeVarInt(2)\n      w.writeUInt16(event.number)\n      break;\n\n    case 'text':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x01)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'copyrightNotice':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x02)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'trackName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x03)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'instrumentName':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x04)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'lyrics':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x05)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'marker':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x06)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'cuePoint':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x07)\n      w.writeVarInt(text.length)\n      w.writeString(text)\n      break;\n\n    case 'channelPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x20)\n      w.writeVarInt(1)\n      w.writeUInt8(event.channel)\n      break;\n\n    case 'portPrefix':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x21)\n      w.writeVarInt(1)\n      w.writeUInt8(event.port)\n      break;\n\n    case 'endOfTrack':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x2F)\n      w.writeVarInt(0)\n      break;\n\n    case 'setTempo':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x51)\n      w.writeVarInt(3)\n      w.writeUInt24(event.microsecondsPerBeat)\n      break;\n\n    case 'smpteOffset':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x54)\n      w.writeVarInt(5)\n      var FRAME_RATES = { 24: 0x00, 25: 0x20, 29: 0x40, 30: 0x60 }\n      var hourByte = (event.hour & 0x1F) | FRAME_RATES[event.frameRate]\n      w.writeUInt8(hourByte)\n      w.writeUInt8(event.min)\n      w.writeUInt8(event.sec)\n      w.writeUInt8(event.frame)\n      w.writeUInt8(event.subFrame)\n      break;\n\n    case 'timeSignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x58)\n      w.writeVarInt(4)\n      w.writeUInt8(event.numerator)\n      var denominator = Math.floor((Math.log(event.denominator) / Math.LN2)) & 0xFF\n      w.writeUInt8(denominator)\n      w.writeUInt8(event.metronome)\n      w.writeUInt8(event.thirtyseconds || 8)\n      break;\n\n    case 'keySignature':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x59)\n      w.writeVarInt(2)\n      w.writeInt8(event.key)\n      w.writeUInt8(event.scale)\n      break;\n\n    case 'sequencerSpecific':\n      w.writeUInt8(0xFF)\n      w.writeUInt8(0x7F)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'unknownMeta':\n      if (event.metatypeByte != null) {\n        w.writeUInt8(0xFF)\n        w.writeUInt8(event.metatypeByte)\n        w.writeVarInt(data.length)\n        w.writeBytes(data)\n      }\n      break;\n\n    // system-exclusive\n    case 'sysEx':\n      w.writeUInt8(0xF0)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    case 'endSysEx':\n      w.writeUInt8(0xF7)\n      w.writeVarInt(data.length)\n      w.writeBytes(data)\n      break;\n\n    // channel events\n    case 'noteOff':\n      // Use 0x90 when opts.useByte9ForNoteOff is set and velocity is zero, or when event.byte9 is explicitly set on it.\n      // parseMidi will set event.byte9 for each event, so that we can get an exact copy by default.\n      // Explicitly set opts.useByte9ForNoteOff to false, to override event.byte9 and always use 0x80 for noteOff events.\n      var noteByte = ((useByte9ForNoteOff !== false && event.byte9) || (useByte9ForNoteOff && event.velocity == 0)) ? 0x90 : 0x80\n\n      eventTypeByte = noteByte | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteOn':\n      eventTypeByte = 0x90 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.velocity)\n      break;\n\n    case 'noteAftertouch':\n      eventTypeByte = 0xA0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.noteNumber)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'controller':\n      eventTypeByte = 0xB0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.controllerType)\n      w.writeUInt8(event.value)\n      break;\n\n    case 'programChange':\n      eventTypeByte = 0xC0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.programNumber)\n      break;\n\n    case 'channelAftertouch':\n      eventTypeByte = 0xD0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      w.writeUInt8(event.amount)\n      break;\n\n    case 'pitchBend':\n      eventTypeByte = 0xE0 | event.channel\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte)\n      var value14 = 0x2000 + event.value\n      var lsb14 = (value14 & 0x7F)\n      var msb14 = (value14 >> 7) & 0x7F\n      w.writeUInt8(lsb14)\n      w.writeUInt8(msb14)\n    break;\n\n    default:\n      throw 'Unrecognized event type: ' + type\n  }\n  return eventTypeByte\n}\n\n\nfunction Writer() {\n  this.buffer = []\n}\n\nWriter.prototype.writeUInt8 = function(v) {\n  this.buffer.push(v & 0xFF)\n}\nWriter.prototype.writeInt8 = Writer.prototype.writeUInt8\n\nWriter.prototype.writeUInt16 = function(v) {\n  var b0 = (v >> 8) & 0xFF,\n      b1 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n}\nWriter.prototype.writeInt16 = Writer.prototype.writeUInt16\n\nWriter.prototype.writeUInt24 = function(v) {\n  var b0 = (v >> 16) & 0xFF,\n      b1 = (v >> 8) & 0xFF,\n      b2 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n}\nWriter.prototype.writeInt24 = Writer.prototype.writeUInt24\n\nWriter.prototype.writeUInt32 = function(v) {\n  var b0 = (v >> 24) & 0xFF,\n      b1 = (v >> 16) & 0xFF,\n      b2 = (v >> 8) & 0xFF,\n      b3 = v & 0xFF\n\n  this.writeUInt8(b0)\n  this.writeUInt8(b1)\n  this.writeUInt8(b2)\n  this.writeUInt8(b3)\n}\nWriter.prototype.writeInt32 = Writer.prototype.writeUInt32\n\n\nWriter.prototype.writeBytes = function(arr) {\n  this.buffer = this.buffer.concat(Array.prototype.slice.call(arr, 0))\n}\n\nWriter.prototype.writeString = function(str) {\n  var i, len = str.length, arr = []\n  for (i=0; i < len; i++) {\n    arr.push(str.codePointAt(i))\n  }\n  this.writeBytes(arr)\n}\n\nWriter.prototype.writeVarInt = function(v) {\n  if (v < 0) throw \"Cannot write negative variable-length integer\"\n\n  if (v <= 0x7F) {\n    this.writeUInt8(v)\n  } else {\n    var i = v\n    var bytes = []\n    bytes.push(i & 0x7F)\n    i >>= 7\n    while (i) {\n      var b = i & 0x7F | 0x80\n      bytes.push(b)\n      i >>= 7\n    }\n    this.writeBytes(bytes.reverse())\n  }\n}\n\nWriter.prototype.writeChunk = function(id, data) {\n  this.writeString(id)\n  this.writeUInt32(data.length)\n  this.writeBytes(data)\n}\n\nmodule.exports = writeMidi\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const parseMidi = require('midi-file').parseMidi;\r\n\r\nexport const CONVERTER_VERSION = '8.2';\r\n\r\nconst FILE_HEADER = 'MUS8';\r\nconst MAX_NOTE_DURATION = 6;\r\nconst NOTE_DURATION_FPS = 255 / MAX_NOTE_DURATION; // 8-bit\r\nconst MAX_LONG_NOTE_DURATION = 255 * MAX_NOTE_DURATION;\r\nconst NOTE_TIME_FPS = 240;\r\nconst MAX_NOTE_TIME = 65535 / NOTE_TIME_FPS; // 16-bit\r\nconst MODE_DURATION = 0x10;\r\n\r\nconst DEFAULT_PITCH_BEND_RANGE = 2;\r\nconst MUSESCORE_DEFAULT_PITCH_BEND_RANGE = 12;\r\n\r\nconst CC_RPN_FINE = 0x64;\r\nconst CC_RPN_COARSE = 0x65;\r\nconst CC_DATA_ENTRY_COARSE = 0x06;\r\nconst CC_DATA_ENTRY_FINE = 0x26;\r\n\r\n/**\r\n * Pack an integer number into a binary string.\r\n * @param {integer} num integer to pack\r\n * @param {integer} bytes number of bytes\r\n * @returns {string}\r\n */\r\nfunction packNumber(num, bytes) {\r\n\tnum = num & (Math.pow(256, bytes) - 1);\r\n\tlet packed = '';\r\n\tfor (let b = 0; b < bytes; b++) {\r\n\t\tpacked = String.fromCharCode(num & 0xFF) + packed;\r\n\t\tnum = num >> 8;\r\n\t}\r\n\treturn packed;\r\n}\r\n\r\n/**\r\n * Pack a time or duration in seconds into a binary string.\r\n * @param {number} seconds\r\n * @param {int} bytes number of bytes\r\n * @param {number} fps precision in frames par second\r\n * @returns {string}\r\n */\r\nfunction packTime(seconds, bytes, fps) {\r\n\treturn packNumber(Math.round(seconds * fps), bytes);\r\n}\r\n\r\n/**\r\n * Pack a string into binary.\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nfunction packString(str) {\r\n\tconst utf8Str = utf8Encode(str);\r\n\treturn packNumber(utf8Str.length, 2) + utf8Str;\r\n}\r\n\r\n/**\r\n * Encode string into UTF-8.\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nfunction utf8Encode(str) {\r\n\treturn unescape(encodeURIComponent(str)).replace(/\\u0000+$/, '');\r\n}\r\n\r\n/**\r\n * Format file name into a title.\r\n * @param {string} fileName\r\n * @returns {string}\r\n */\r\nfunction filenameToTitle(fileName) {\r\n\treturn fileName.replace(/[_]+/g, ' ').replace(/\\.[a-zA-Z0-9]+$/, '').replace(/^(.)|\\s+(.)/g, function ($1) {\r\n\t\treturn $1.toUpperCase();\r\n\t});\r\n}\r\n\r\n/**\r\n * Extract events from parsed MIDI file into an ordered flat array with timestamps in seconds.\r\n * @param {object} midi parsed MIDI file\r\n * @returns {array}\r\n */\r\nfunction extractEvents(midi) {\r\n\t// Extract all events as a flat array\r\n\tconst events = [];\r\n\tfor (const trackIndex in midi.tracks) {\r\n\t\tconst tick = 0;\r\n\t\tfor (const event of midi.tracks[trackIndex]) {\r\n\t\t\ttick += event.deltaTime;\r\n\t\t\tevent.tick = tick;\r\n\t\t\tevent.trackIndex = parseInt(trackIndex, 10);\r\n\t\t\tevents.push(event);\r\n\t\t}\r\n\t}\r\n\r\n\t// Sort events in chronological order\r\n\tevents.sort((a, b) => {\r\n\t\tif (a.tick < b.tick) {\r\n\t\t\treturn -1;\r\n\t\t} else if (a.tick > b.tick) {\r\n\t\t\treturn 1;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t});\r\n\r\n\t// Convert event timings into seconds\r\n\r\n\tlet currentTick = 0;\r\n\tlet currentTime = 0;\r\n\tlet bpm = 120;\r\n\tlet tickDuration;\r\n\tif (midi.header.ticksPerBeat) {\r\n\t\ttickDuration = 60 / bpm / midi.header.ticksPerBeat;\r\n\t} else {\r\n\t\ttickDuration = 1000000 / (midi.header.framesPerSecond * midi.header.ticksPerFrame);\r\n\t}\r\n\r\n\tfor (const event of events) {\r\n\t\tconst relativeTick = event.tick - currentTick;\r\n\t\tevent.time = currentTime + relativeTick * tickDuration;\r\n\t\tcurrentTime = event.time;\r\n\t\tcurrentTick = event.tick;\r\n\r\n\t\t// Handle tempo change\r\n\t\tif (event.type === 'setTempo') {\r\n\t\t\tbpm = 60000000 / event.microsecondsPerBeat;\r\n\t\t\tif (midi.header.ticksPerBeat) {\r\n\t\t\t\ttickDuration = 60 / bpm / midi.header.ticksPerBeat;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn events;\r\n}\r\n\r\n/**\r\n * Replace sustain pedal events by proper noteOff events.\r\n * @param {array} events\r\n * @returns {array}\r\n */\r\nfunction processSustain(events) {\r\n\r\n\tconst eventsWithSustain = [];\r\n\tconst notesDown = new Map(); // Notes that have their piano key pushed down\r\n\tconst skippedNotesOff = new Map(); // Notes off events that were skipped because of channel sustain\r\n\tconst sustainedChannels = {}; // Channels being sustained\r\n\r\n\tfor (const event of events) {\r\n\t\t// Note events\r\n\t\tif (event.type === 'noteOn' || event.type === 'noteOff') {\r\n\t\t\tconst noteKey = `${event.channel}-${event.trackIndex}-${event.noteNumber}`;\r\n\t\t\tif (event.type === 'noteOn') {\r\n\t\t\t\tnotesDown.set(noteKey, event); // The piano key is down\r\n\r\n\t\t\t\t// There is already a noteOff awaiting for this note: insert it first\r\n\t\t\t\tconst previousNoteOffEvent = skippedNotesOff.get(noteKey);\r\n\t\t\t\tif (previousNoteOffEvent) {\r\n\t\t\t\t\teventsWithSustain.push({\r\n\t\t\t\t\t\tdeltaTime: event.deltaTime,\r\n\t\t\t\t\t\ttick: event.tick,\r\n\t\t\t\t\t\ttime: event.time,\r\n\t\t\t\t\t\tchannel: previousNoteOffEvent.channel,\r\n\t\t\t\t\t\tnoteNumber: previousNoteOffEvent.noteNumber,\r\n\t\t\t\t\t\ttrackIndex: previousNoteOffEvent.trackIndex,\r\n\t\t\t\t\t\ttype: 'noteOff',\r\n\t\t\t\t\t\tvelocity: previousNoteOffEvent.velocity,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tskippedNotesOff.delete(noteKey);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Always insert noteOn events\r\n\t\t\t\teventsWithSustain.push({ ...event });\r\n\t\t\t} else { // noteOff\r\n\t\t\t\tnotesDown.delete(noteKey); // The piano key is up\r\n\t\t\t\tif (!sustainedChannels[event.channel]) {\r\n\t\t\t\t\t// Add noteOff event if the channel is not sustained\r\n\t\t\t\t\teventsWithSustain.push({ ...event });\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Don't add noteOff event when sustained but keep if for later on pedal release\r\n\t\t\t\t\tskippedNotesOff.set(noteKey, event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Sustain pedal events\r\n\t\telse if (event.type === 'controller' && event.controllerType === 64) {\r\n\t\t\tconst isSustained = event.value >= 64;\r\n\t\t\tif (!isSustained && sustainedChannels[event.channel]) { // Sustain pedal was released\r\n\t\t\t\tfor (const [noteKey, noteOff] of skippedNotesOff) {\r\n\t\t\t\t\t// Only stop notes for the current channel and that is not held down\r\n\t\t\t\t\tif (noteOff.channel === event.channel && !notesDown.has(noteKey)) {\r\n\t\t\t\t\t\t// Add noteOff event\r\n\t\t\t\t\t\teventsWithSustain.push({\r\n\t\t\t\t\t\t\tdeltaTime: event.deltaTime,\r\n\t\t\t\t\t\t\ttick: event.tick,\r\n\t\t\t\t\t\t\ttime: event.time,\r\n\t\t\t\t\t\t\tchannel: noteOff.channel,\r\n\t\t\t\t\t\t\tnoteNumber: noteOff.noteNumber,\r\n\t\t\t\t\t\t\ttrackIndex: noteOff.trackIndex,\r\n\t\t\t\t\t\t\ttype: 'noteOff',\r\n\t\t\t\t\t\t\tvelocity: noteOff.velocity,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tskippedNotesOff.delete(noteKey);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsustainedChannels[event.channel] = isSustained;\r\n\t\t}\r\n\t\t// Other events\r\n\t\telse {\r\n\t\t\teventsWithSustain.push({ ...event });\r\n\t\t}\r\n\t}\r\n\r\n\t// Add noteOff leftovers\r\n\tfor (const [noteKey, noteOff] of skippedNotesOff) {\r\n\t\teventsWithSustain.push({ ...noteOff });\r\n\t}\r\n\r\n\treturn eventsWithSustain;\r\n}\r\n\r\n/**\r\n * Replace pitch bend events by semitone slides.\r\n * @param {array} events\r\n * @param {object} options\r\n * @param {boolean} options.fromMuseScore Fix default pitch bend range for songs imported from MuseScore\r\n * @returns {array}\r\n */\r\nfunction processPitchBend(events, options = {}) {\r\n\r\n\t// Set default pitch bend range to 12 for songs imported from MuseScore\r\n\tconst defaultPitchBendRange = options.fromMuseScore ? MUSESCORE_DEFAULT_PITCH_BEND_RANGE : DEFAULT_PITCH_BEND_RANGE;\r\n\r\n\tconst eventsWithPitchBend = [];\r\n\tconst notesOn = {};\r\n\tconst channelCC = {};\r\n\tconst pitchBendValue = {};\r\n\tconst pitchBendRange = {};\r\n\tconst pitchBendRangeCCTypes = [CC_RPN_COARSE, CC_RPN_FINE, CC_DATA_ENTRY_COARSE, CC_DATA_ENTRY_FINE];\r\n\r\n\tlet isSettingPitchBendRangeCoarse = {};\r\n\tlet isSettingPitchBendRangeFine = {};\r\n\r\n\tfor (const event of events) {\r\n\t\t// Control change event to reset all controllers\r\n\t\tif (event.type === 'controller' && event.controllerType === 0x79) {\r\n\t\t\tpitchBendRange[event.channel] = defaultPitchBendRange;\r\n\t\t}\r\n\r\n\t\t// Control change event for pitch bend range\r\n\t\tlet newPitchBandRangeValue = null;\r\n\t\tif (event.type === 'controller' && pitchBendRangeCCTypes.includes(event.controllerType)) {\r\n\t\t\tif (!channelCC[event.channel]) {\r\n\t\t\t\tchannelCC[event.channel] = {};\r\n\t\t\t}\r\n\t\t\tchannelCC[event.channel][event.controllerType] = event.value;\r\n\r\n\t\t\tlet isPitchBendRangeMessageComplete = false;\r\n\t\t\tif (event.controllerType === CC_RPN_COARSE && event.value === 0x00) {\r\n\t\t\t\tisSettingPitchBendRangeCoarse[event.channel] = true;\r\n\t\t\t} else if (event.controllerType === CC_RPN_FINE && event.value === 0x00) {\r\n\t\t\t\tisSettingPitchBendRangeFine[event.channel] = true;\r\n\t\t\t} else if (event.controllerType === CC_DATA_ENTRY_COARSE && isSettingPitchBendRangeCoarse[event.channel]) {\r\n\t\t\t\tisSettingPitchBendRangeCoarse[event.channel] = false;\r\n\t\t\t\tisPitchBendRangeMessageComplete = true;\r\n\t\t\t} else if (event.controllerType === CC_DATA_ENTRY_FINE && isSettingPitchBendRangeFine[event.channel]) {\r\n\t\t\t\tisSettingPitchBendRangeFine[event.channel] = false;\r\n\t\t\t\tisPitchBendRangeMessageComplete = true;\r\n\t\t\t}\r\n\r\n\t\t\t// We're done receiving our pitch bend range message\r\n\t\t\tif (isPitchBendRangeMessageComplete) {\r\n\t\t\t\tnewPitchBandRangeValue = (channelCC[event.channel][CC_DATA_ENTRY_COARSE] || defaultPitchBendRange) + (channelCC[event.channel][CC_DATA_ENTRY_FINE] || 0) / 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Note events\r\n\t\tif (event.type === 'noteOn' || event.type === 'noteOff') {\r\n\t\t\t// Apply pitch bend note offset to the note event\r\n\t\t\tconst channelPitchBendValue = pitchBendValue[event.channel] || 0;\r\n\t\t\tconst channelPitchBendRange = pitchBendRange[event.channel] || defaultPitchBendRange;\r\n\t\t\tconst noteOffset = Math.round(channelPitchBendValue * channelPitchBendRange);\r\n\t\t\tconst noteNumber = event.noteNumber + noteOffset;\r\n\t\t\teventsWithPitchBend.push({ ...event, noteNumber });\r\n\r\n\t\t\t// Keep noteOn events to split them if a pitch bend variation occurs\r\n\t\t\tconst noteKey = `${event.trackIndex}-${event.noteNumber}`;\r\n\t\t\tif (!notesOn[event.channel]) {\r\n\t\t\t\tnotesOn[event.channel] = new Map();\r\n\t\t\t}\r\n\t\t\tif (event.type === 'noteOn') {\r\n\t\t\t\tnotesOn[event.channel].set(noteKey, event);\r\n\t\t\t} else {\r\n\t\t\t\tnotesOn[event.channel].delete(noteKey);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Pitch bend events\r\n\t\telse if (event.type === 'pitchBend' || newPitchBandRangeValue !== null) {\r\n\t\t\tconst currentPitchBendValue = (pitchBendValue[event.channel] || 0) * (pitchBendRange[event.channel] || defaultPitchBendRange);\r\n\r\n\t\t\t// Changing pitch bend range\r\n\t\t\tif (newPitchBandRangeValue !== null) {\r\n\t\t\t\tpitchBendRange[event.channel] = newPitchBandRangeValue;\r\n\t\t\t}\r\n\r\n\t\t\t// Changing pitch bend value\r\n\t\t\tif (event.type === 'pitchBend') {\r\n\t\t\t\tpitchBendValue[event.channel] = event.value / 0x2000;\r\n\t\t\t}\r\n\r\n\t\t\tconst newPitchBendValue = (pitchBendValue[event.channel] || 0) * (pitchBendRange[event.channel] || defaultPitchBendRange);\r\n\r\n\t\t\t// Get current and new note (semitone) offsets\r\n\t\t\tconst currentNoteOffset = Math.round(currentPitchBendValue);\r\n\t\t\tconst newNoteOffset = Math.round(newPitchBendValue);\r\n\r\n\t\t\t// The semitone offset has changed\r\n\t\t\tif (currentNoteOffset !== newNoteOffset && notesOn[event.channel]) {\r\n\t\t\t\t// Split note to create the slide\r\n\t\t\t\tfor (const [noteKey, noteOn] of notesOn[event.channel]) {\r\n\t\t\t\t\t// Insert noteOff event from current pitch bend value\r\n\t\t\t\t\teventsWithPitchBend.push({\r\n\t\t\t\t\t\tdeltaTime: event.deltaTime,\r\n\t\t\t\t\t\ttick: event.tick,\r\n\t\t\t\t\t\ttime: event.time,\r\n\t\t\t\t\t\tchannel: noteOn.channel,\r\n\t\t\t\t\t\tnoteNumber: noteOn.noteNumber + currentNoteOffset,\r\n\t\t\t\t\t\ttrackIndex: noteOn.trackIndex,\r\n\t\t\t\t\t\ttype: 'noteOff',\r\n\t\t\t\t\t\tvelocity: noteOn.velocity,\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// Insert new noteOn event with the new pitch bend value\r\n\t\t\t\t\teventsWithPitchBend.push({\r\n\t\t\t\t\t\tdeltaTime: event.deltaTime,\r\n\t\t\t\t\t\ttick: event.tick,\r\n\t\t\t\t\t\ttime: event.time,\r\n\t\t\t\t\t\tchannel: noteOn.channel,\r\n\t\t\t\t\t\tnoteNumber: noteOn.noteNumber + newNoteOffset,\r\n\t\t\t\t\t\ttrackIndex: noteOn.trackIndex,\r\n\t\t\t\t\t\ttype: 'noteOn',\r\n\t\t\t\t\t\tvelocity: noteOn.velocity,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Other events\r\n\t\telse {\r\n\t\t\teventsWithPitchBend.push({ ...event });\r\n\t\t}\r\n\t}\r\n\r\n\treturn eventsWithPitchBend;\r\n}\r\n\r\n/**\r\n * Calculate the duration property of the noteOn events inside the provided events array.\r\n * @param {array} events\r\n * @returns {array} same as provided\r\n */\r\nfunction calculateNoteOnDurations(events) {\r\n\tconst notesOn = new Map();\r\n\r\n\tfor (const event of events) {\r\n\t\tif (event.type === 'noteOn' || event.type === 'noteOff') {\r\n\t\t\tconst noteKey = `${event.trackIndex}-${event.channel}-${event.noteNumber}`;\r\n\t\t\tconst noteOnStack = notesOn.get(noteKey) || [];\r\n\r\n\t\t\tif (event.type === 'noteOn') {\r\n\t\t\t\tnoteOnStack.push(event);\r\n\t\t\t\tnotesOn.set(noteKey, noteOnStack);\r\n\t\t\t} else if (noteOnStack.length > 0) {\r\n\t\t\t\tconst noteOnEvent = noteOnStack.pop();\r\n\t\t\t\tnoteOnEvent.duration = event.time - noteOnEvent.time;\r\n\t\t\t\tif (noteOnStack.length === 0) {\r\n\t\t\t\t\tnotesOn.delete(noteKey);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn events;\r\n}\r\n\r\n/**\r\n * Convert MIDI file into a Musician song object.\r\n * @param {ArrayBuffer} midiArray\r\n * @param {string} fileName\r\n * @param {object} options\r\n * @returns {object}\r\n */\r\nfunction convertMidi(midiArray, fileName, options) {\r\n\r\n\t// Parse binary MIDI file\r\n\tif (midiArray instanceof ArrayBuffer) {\r\n\t\tmidiArray = new Uint8Array(midiArray);\r\n\t}\r\n\tconst midi = parseMidi(midiArray);\r\n\tconst rawEvents = extractEvents(midi);\r\n\r\n\t// Process sustain pedal\r\n\tconst eventsWithSustain = processSustain(rawEvents);\r\n\r\n\t// Process pitch bend\r\n\tconst eventsWithPitchBend = processPitchBend(eventsWithSustain, options);\r\n\r\n\t// Calculate noteOn durations\r\n\tconst events = calculateNoteOnDurations(eventsWithPitchBend);\r\n\r\n\t// Create song object\r\n\tlet title;\r\n\tconst duration = events[events.length - 1].time; // Get the last event time as song duration\r\n\tconst tracksMap = new Map();\r\n\tconst trackNames = {}\r\n\tconst instrumentByTrack = new Map();\r\n\tconst instrumentByChannel = new Map();\r\n\tconst titleParts = [];\r\n\r\n\t/**\r\n\t * Create or return existing track matching index and channel\r\n\t * @param {integer} trackIndex MIDI track index\r\n\t * @param {integer} channel MIDI channel\r\n\t * @returns {object}\r\n\t */\r\n\tfunction getTrack(trackIndex = 0, channel = 0) {\r\n\t\tconst trackInstrument = instrumentByTrack.get(`${channel}-${trackIndex}`);\r\n\t\tconst channelInstrument = instrumentByChannel.get(channel);\r\n\t\tconst instrument = (trackInstrument !== undefined) ? trackInstrument : (channelInstrument || 0);\r\n\t\tconst trackKey = `${trackIndex}-${channel}-${instrument}`;\r\n\t\t// For MIDI format 2 files, channels 10 and 11 can be used for percussions\r\n\t\tconst isPercussion = (midi.format === 2) ? (channel === 9 || channel === 10) : (channel === 9);\r\n\r\n\t\t// Create new track\r\n\t\tif (!tracksMap.has(trackKey)) {\r\n\t\t\tconst track = {\r\n\t\t\t\tname: '',\r\n\t\t\t\ttrackIndex,\r\n\t\t\t\tchannel,\r\n\t\t\t\tinstrument,\r\n\t\t\t\tisPercussion,\r\n\t\t\t\tnotes: []\r\n\t\t\t};\r\n\t\t\ttracksMap.set(trackKey, track);\r\n\t\t\treturn track;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\treturn tracksMap.get(trackKey);\r\n\t\t}\r\n\t}\r\n\r\n\t// Fill song data\r\n\tfor (const event of events) {\r\n\t\tswitch (event.type) {\r\n\t\t\tcase 'noteOn':\r\n\t\t\t\tconst track = getTrack(event.trackIndex, event.channel);\r\n\t\t\t\ttrack.notes.push({\r\n\t\t\t\t\ttime: event.time,\r\n\t\t\t\t\tduration: event.duration,\r\n\t\t\t\t\tkey: event.noteNumber,\r\n\t\t\t\t\tvelocity: event.velocity,\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'programChange':\r\n\t\t\t\tinstrumentByTrack.set(`${event.channel}-${event.trackIndex}`, event.programNumber);\r\n\t\t\t\tinstrumentByChannel.set(event.channel, event.programNumber);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'trackName':\r\n\t\t\t\tconst trackName = event.text;\r\n\t\t\t\ttrackNames[event.trackIndex] = trackName;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'text':\r\n\t\t\t\t// Extract title from Karaoke metadata\r\n\t\t\t\tconst matches = event.text.match(/^@T(.*)$/);\r\n\t\t\t\tif (matches) {\r\n\t\t\t\t\ttitleParts.push(matches[1]);\r\n\t\t\t\t}\r\n\r\n\t\t\tdefault:\r\n\t\t}\r\n\t}\r\n\r\n\t// Song title\r\n\ttitle = (titleParts.length > 0) ? titleParts.join(' - ') : filenameToTitle(fileName); // Default to file name\r\n\r\n\t// Create tracks list\r\n\tconst tracks = Array.from(tracksMap, ([trackKey, track]) => track).filter(track => (track.notes.length > 0)); // Only keep tracks with notes\r\n\ttracks.sort((a, b) => {\r\n\t\tconst weightA = a.trackIndex * 1000000 + a.channel * 1000 + a.instrument;\r\n\t\tconst weightB = b.trackIndex * 1000000 + b.channel * 1000 + b.instrument;\r\n\t\tif (weightA < weightB) {\r\n\t\t\treturn -1;\r\n\t\t} else {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t})\r\n\r\n\t// Track names\r\n\tfor (const track of tracks) {\r\n\t\ttrack.name = trackNames[track.trackIndex] || '';\r\n\t}\r\n\r\n\t// Return final object\r\n\treturn { title, duration, tracks };\r\n}\r\n\r\n/**\r\n * Convert MIDI file into a Musician song file.\r\n * @param {ArrayBuffer} midiArray\r\n * @param {string} fileName\r\n * @param {object} options\r\n * @returns {string}\r\n */\r\nexport function packSong(midiArray, fileName, options) {\r\n\t// Get formatted song\r\n\tconst song = convertMidi(midiArray, fileName, options);\r\n\r\n\tlet packedSong = '';\r\n\r\n\t// Header (4)\r\n\tpackedSong += FILE_HEADER;\r\n\r\n\t// Song title (2) + (title length in bytes)\r\n\tpackedSong += packString(song.title);\r\n\r\n\t// Song mode (1)\r\n\tpackedSong += packNumber(MODE_DURATION, 1);\r\n\r\n\t// Duration (3)\r\n\tpackedSong += packNumber(Math.ceil(song.duration), 3);\r\n\r\n\t// Grab track and notes\r\n\tconst tracks = [];\r\n\tfor (const rawTrack of song.tracks) {\r\n\t\tconst track = {};\r\n\r\n\t\t// Track instrument\r\n\t\tif (rawTrack.isPercussion) {\r\n\t\t\t// Shift instrument number by 128 for percussions\r\n\t\t\ttrack.instrument = rawTrack.instrument + 128;\r\n\t\t} else {\r\n\t\t\ttrack.instrument = rawTrack.instrument;\r\n\t\t}\r\n\t\ttrack.isPercussion = rawTrack.isPercussion;\r\n\r\n\t\t// Track channel\r\n\t\ttrack.channel = rawTrack.channel + 1;\r\n\r\n\t\t// Track name\r\n\t\ttrack.name = rawTrack.name || \"\";\r\n\r\n\t\t// Track notes\r\n\t\tlet offset = 0;\r\n\t\tconst notes = [];\r\n\t\tfor (const rawNote of rawTrack.notes) {\r\n\t\t\tconst noteKey = rawNote.key;\r\n\r\n\t\t\t// Ignore notes that are not within the MIDI range\r\n\t\t\t// Also ignore notes with key = 127 to avoid notes type 1 being taken for a separator (0xFF).\r\n\t\t\tif (noteKey >= 0 && noteKey < 127) {\r\n\t\t\t\t// Get time and duration\r\n\t\t\t\tlet noteTime = rawNote.time - offset;\r\n\t\t\t\tconst noteDuration = Math.min(rawNote.duration, MAX_LONG_NOTE_DURATION);\r\n\r\n\t\t\t\t// Insert note spacers if needed\r\n\t\t\t\tlet noteSpacer = '';\r\n\t\t\t\twhile (noteTime > MAX_NOTE_TIME) {\r\n\t\t\t\t\tnoteSpacer += packNumber(0xFF, 1); // 0xFF char\r\n\t\t\t\t\tnoteTime -= MAX_NOTE_TIME;\r\n\t\t\t\t\toffset += MAX_NOTE_TIME;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Calculate rounded time based on NOTE_TIME_FPS\r\n\t\t\t\tconst timeFrames = Math.round(noteTime * NOTE_TIME_FPS);\r\n\t\t\t\tconst roundedTime = timeFrames / NOTE_TIME_FPS;\r\n\r\n\t\t\t\t// Calculated rounded duration based on NOTE_DURATION_FPS\r\n\t\t\t\tconst adjustedDuration = Math.max(0, noteDuration + noteTime - roundedTime);\r\n\t\t\t\tconst durationFrames = Math.floor(adjustedDuration * NOTE_DURATION_FPS);\r\n\r\n\t\t\t\t// Determine if it's a long note or a short one\r\n\t\t\t\tconst isLongNote = durationFrames > 0xFF && noteKey < 127; // Avoid long notes of the max 127 key to avoid confusion with a spacer\r\n\t\t\t\tconst longNoteFlag = isLongNote ? 0x80 : 0x00;\r\n\r\n\t\t\t\t// Insert packed note: key (1), time (2), duration (1 or 2)\r\n\t\t\t\tnotes.push(\r\n\t\t\t\t\tnoteSpacer +\r\n\t\t\t\t\tpackNumber(noteKey | longNoteFlag, 1) +\r\n\t\t\t\t\tpackNumber(timeFrames, 2) +\r\n\t\t\t\t\tpackNumber(durationFrames, isLongNote ? 2 : 1)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\ttrack.notes = notes;\r\n\r\n\t\ttracks.push(track);\r\n\t}\r\n\r\n\t// Number of tracks (1)\r\n\tif (tracks.length > 255) {\r\n\t\tthrow \"A song cannot have more than 255 tracks.\";\r\n\t}\r\n\tpackedSong += packNumber(tracks.length, 1);\r\n\r\n\t// Track data: instrument (1), channel (1), number of notes (2),\r\n\tfor (const track of tracks) {\r\n\t\tif (track.notes.length > 65535) {\r\n\t\t\tthrow \"A track cannot have more than 65535 notes.\";\r\n\t\t}\r\n\r\n\t\tpackedSong += packNumber(track.instrument, 1);\r\n\t\tpackedSong += packNumber(track.channel, 1);\r\n\t\tpackedSong += packNumber(track.notes.length, 2);\r\n\t}\r\n\r\n\t// Note data\r\n\tfor (const track of tracks) {\r\n\t\tpackedSong += track.notes.join(''); // Notes are already packed\r\n\t};\r\n\r\n\t// Track names (2) + (title length in bytes)\r\n\tfor (const track of tracks) {\r\n\t\tpackedSong += packString(track.name);\r\n\t}\r\n\r\n\treturn packedSong;\r\n}"],"sourceRoot":""}